<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sysctl</title>
  
  <subtitle>Too young, too simple. Sometimes, naive &amp; stupid</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sysctl.me/"/>
  <updated>2020-06-13T17:05:09.621Z</updated>
  <id>https://www.sysctl.me/</id>
  
  <author>
    <name>Goooo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置OPENSSH</title>
    <link href="https://www.sysctl.me/2020/06/13/Linux/OPENSSH/Convert-OpenSSH-Key/"/>
    <id>https://www.sysctl.me/2020/06/13/Linux/OPENSSH/Convert-OpenSSH-Key/</id>
    <published>2020-06-13T15:20:00.000Z</published>
    <updated>2020-06-13T17:05:09.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转换OpenSSH-private-key为RSA-private-key"><a href="#转换OpenSSH-private-key为RSA-private-key" class="headerlink" title="转换OpenSSH private key为RSA private key"></a>转换OpenSSH private key为RSA private key</h1><p>今天下午，想把本机的<code>Private KEY</code>添加到堡垒机，倒是也没仔细看，直接复制粘贴到堡垒机中，低能堡垒机提示说私钥格式无效。</p><p>==WTF?==</p><p>应该是SSH版本太高了，看了下发现第一行有区别（内容也不同）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># OpenSSH_8.1p1</span><br><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">xxx</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br><span class="line"># OpenSSH_7.5p1</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">xxx</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>0202年了，SSH版本也要升级到8.0了，先不管了，转换吧，一条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa /tmp/path/to/key</span><br><span class="line"><span class="comment"># 就这一条</span></span><br><span class="line">ssh-keygen -p -N <span class="string">""</span> -m pem -f /tmp/path/to/key</span><br><span class="line"><span class="comment"># 记得保管好呀</span></span><br><span class="line">rm -f /tmp/path/to/key</span><br></pre></td></tr></table></figure><p>复制<code>private key</code>转换后填到堡垒机，删掉，一定保管好<code>private key</code>。</p><p>==堡垒机是真的垃圾，谁家都一样。==</p><p>以后在家基本告别电脑了，我家一条是真的爱玩电脑hhhh。</p><p><img src="https://blog-image.nos-eastchina1.126.net/yitiao01" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/yitiao02" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/yitiao03" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;转换OpenSSH-private-key为RSA-private-key&quot;&gt;&lt;a href=&quot;#转换OpenSSH-private-key为RSA-private-key&quot; class=&quot;headerlink&quot; title=&quot;转换OpenSSH private 
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="SSH" scheme="https://www.sysctl.me/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>如何测试一个端口是否可达</title>
    <link href="https://www.sysctl.me/2020/04/11/Networking/How-to-testing-UDP-port/"/>
    <id>https://www.sysctl.me/2020/04/11/Networking/How-to-testing-UDP-port/</id>
    <published>2020-04-11T03:00:00.000Z</published>
    <updated>2020-04-11T14:20:27.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP与UDP连接"><a href="#TCP与UDP连接" class="headerlink" title="TCP与UDP连接"></a>TCP与UDP连接</h1><blockquote><p> 看结果请直接拉到底↓</p></blockquote><p><code>TCP</code>和<code>UDP</code>协议是两个不同的协议，用于处理IP网络（Internet）中的客户端之间的数据通信。</p><p>在传统<code>OSI</code>模型中，<code>TCP</code>和<code>UDP</code>是<em>传输层协议</em>。其中<code>TCP</code>是<strong>面向连接</strong>的协议，而<code>UDP</code>是<strong>无连接</strong>协议。</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>从理论上讲，传输层协议可以是一个非常简单的，但是不能将TCP协议称为简单协议。为什么要使用与TCP一样复杂的传输层？最重要的原因取决于IP的不可靠性。实际上，TCP下的所有层都不可靠，并且逐跳传递数据报。IP层逐跳传送数据报，并且不能保证传送数据报。这是一个无连接系统。IP只是处理数据报的路由。如果出现问题，IP会立即丢弃该数据包，并在此过程中将错误消息返回给发送方。确定通过网络发送的数据报的状态并在部分已被丢弃的情况下处理信息重发的任务落在TCP上。</p><p>大多数用户将TCP和IP视为紧密的对，但是TCP可以并且经常与其他传输协议一起使用。</p><p>例如，在文件传输协议（FTP）和简单邮件传输协议（SMTP）中都使用TCP或其中的一部分，它们都不使用IP。</p><p>传输控制协议为IP层和上层提供了大量服务。最重要的是，它为上层提供了面向连接的协议，该协议使应用程序可以确保通过网络发送的数据报被完整接收。在此角色下，TCP充当提供可靠通信的消息验证协议。如果数据报已损坏或丢失，则通常由TCP（不是较高层中的应用程序）来处理重传。</p><p>TCP管理来自更高层的数据报流，以及来自IP层的传入数据报。它必须确保优先事项和安全得到尊重。TCP必须能够处理其上期望输入数据报的应用程序的终止，以及较低层的故障。TCP还必须维护TCP层内外所有数据流的状态表。将这些服务隔离在一个单独的层中，可以在不考虑流控制或消息可靠性的情况下设计应用程序。没有TCP层，每个应用程序都必须自己实现服务，这是资源的浪费。</p><p>TCP位于传输层，位于IP之上，但位于上层及其应用程序之下，如下图所示。TCP仅驻留在实际处理数据报的设备上，以确保数据报已从源计算机传递到目标计算机。它不驻留在仅路由数据报的设备上，因此网关中没有TCP层。这是有道理的，因为在网关上，数据报在分层模型中不需要比IP层更高。</p><h3 id="TCP报头结构"><a href="#TCP报头结构" class="headerlink" title="TCP报头结构"></a>TCP报头结构</h3><p>TCP段作为Internet数据报发送。Internet协议报头包含几个信息字段，包括源和目标主机地址。TCP头跟随Internet头，提供特定于TCP协议的信息。这种划分允许存在TCP以外的主机级别协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          Source Port          |       Destination Port        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                        Sequence Number                        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                    Acknowledgment Number                      |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|  Data |           |U|A|P|R|S|F|                               |</span><br><span class="line">| Offset| Reserved  |R|C|S|S|Y|I|            Window             |</span><br><span class="line">|       |           |G|K|H|T|N|N|                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|           Checksum            |         Urgent Pointer        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                    Options                    |    Padding    |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                             data                              |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line"></span><br><span class="line">                         TCP Header Format</span><br><span class="line"></span><br><span class="line">       请注意，一个刻度表示一位位置。</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>名称</th><th>含义</th><th>长度</th></tr></thead><tbody><tr><td>Source Port</td><td>源端口号</td><td>16</td></tr><tr><td>Destination Port</td><td>目的端口号</td><td>16</td></tr><tr><td>Sequence Number</td><td>此段中第一个数据八位位组的序列号（存在SYN时除外）。如果存在SYN，则序列号为初始序列号（ISN），而第一个数据字节为ISN + 1。</td><td>32</td></tr><tr><td>Acknowledgment Number</td><td>如果设置了ACK控制位，则该字段包含该段的发送者希望接收的下一个序列号的值。建立连接后，将始终发送该连接。</td><td>32</td></tr><tr><td>Data Offset</td><td>TCP报头中的32位字的数量。这指示数据从何处开始。TCP头（甚至包括选项在内的一个头）的整数是32位长。</td><td>4</td></tr><tr><td>Reserved</td><td>保留以备将来使用。必须为零。</td><td>6</td></tr><tr><td>Control Bits</td><td>控制位 — 从左至右</td><td>6</td></tr><tr><td>URG</td><td>紧急指针字段意义重大</td><td>1</td></tr><tr><td>ACK</td><td>确认字段有效</td><td>1</td></tr><tr><td>PSH</td><td>推送功能</td><td>1</td></tr><tr><td>RST</td><td>重置连接</td><td>1</td></tr><tr><td>SYN</td><td>同步序列号</td><td>1</td></tr><tr><td>FIN</td><td>没有来自发件人的更多数据</td><td>1</td></tr><tr><td>Window</td><td>此字节的数量以该段的发送方愿意接受的确认字段中指示的位数开始。</td><td>8</td></tr><tr><td>Checksum</td><td>校验和字段是标头和文本中所有16位字的一个人的补码之和的16位一个人的补码。如果段中包含奇数个要校验和的标题和文本八位位组，则最后一个八位组将在右边填充零，以形成一个16位字用于校验和。打击垫不作为片段的一部分发送。在计算校验和时，校验和字段本身将替换为零。<br />校验和还覆盖了概念上以TCP头为前缀的96位伪头。该伪标头包含源地址，目标地址，协议和TCP长度。这样可以为TCP提供保护，以防止路由错误的段。该信息在Internet协议中承载，并通过IP上TCP的调用参数或结果在TCP /网络接口中传输。</td><td>16</td></tr><tr><td>Urgent Pointer</td><td>此字段传达紧急指针的当前值，作为与该段中序列号的正偏移量。紧急指针指向紧随紧急数据之后的八位位组的序号。仅在设置了URG控制位的段中解释此字段。</td><td>16</td></tr><tr><td>Options</td><td>选项可能会占用TCP标头末尾的空间，并且是8位长度的倍数。所有选项都包含在校验和中。选项可以在任何八位位组边界上开始。选项的格式有两种情况：</td><td>8的倍数</td></tr><tr><td></td><td>情况1：一个八位组。</td><td></td></tr><tr><td></td><td>情况2：八位位组，选项长度的八位位组和实际的选项数据八位位组。选项长度计算选项类型和选项长度的两个八位位组以及选项数据八位位组。请注意，选项列表可能比数据偏移量字段暗示的要短。超出选项结尾选项的标头内容必须为标头填充（即零）。</td></tr></tbody></table></div><h3 id="TCP通讯"><a href="#TCP通讯" class="headerlink" title="TCP通讯"></a>TCP通讯</h3><p>在将TCP用于任何实际有用的目的（即发送数据）之前，必须在希望通信的两个设备之间建立连接。此过程通常称为连接建立，涉及交换消息，该消息将两个设备从其初始连接状态（CLOSED）转换为正常操作状态（ESTABLISHED）。</p><p><strong>连接建立功能</strong></p><p>建立连接过程实际上会完成几件事，因为它创建了适合于数据交换的连接：</p><p><em>联系和通信：</em> 客户端和服务器相互联系，并通过相互发送消息建立通信。在这一点之前，服务器通常甚至不知道它将与之对话的客户端，因此它在连接建立期间就发现了这一点。</p><p><em>序列号同步：</em> 每个设备都让对方知道其首次传输要使用的初始序列号。</p><p><em>参数交换：</em> 控制TCP连接操作的某些参数由两个设备交换。</p><p><strong>用于建立连接的控制消息：SYN和ACK</strong></p><p>TCP使用控制消息来管理联系和通信过程。但是，没有任何特殊的TCP控制消息类型。所有TCP消息均使用相同的段格式。TCP报头中的一组控制标志指示段是用于控制目的还是仅用于承载数据。使用控制消息时，以下标志会更改。</p><p><em>SYN：</em> 该位指示该段正在用于初始化连接。参考上面提到的序列号同步，SYN表示同步。</p><p><em>ACK：</em> 此位指示发送网段的设备正在传送对其已接收消息（例如SYN）的确认。</p><p><strong>正常连接建立：“三次握手”</strong></p><p>为了建立连接，每个设备必须发送一个SYN并从另一个设备接收一个ACK。因此，从概念上讲，需要在设备之间传递四个控制消息。但是，当一个人可以同时通信时，在单独的消息中发送SYN和ACK效率很低。因此，在连接建立中的正常事件序列中，通过设置两个相关位（有时称为SYN + ACK的消息）来一起发送SYN之一和ACK之一。这总共产生了三个消息，因此，连接过程称为三次握手。</p><blockquote><p>关键： 在TCP客户端和服务器之间建立连接的正常过程包括三个步骤：</p></blockquote><ul><li><p>客户端发送SYN消息</p></li><li><p>服务器发送结合了客户端SYN的ACK并包含服务器SYN的消息</p></li><li>然后客户端发送针对服务器的SYN的ACK。这称为TCP三次握手。</li></ul><p><img src="https://blog-image.nos-eastchina1.126.net/tcpfsm.png" alt=""></p><p>连接在其生存周期内会经历一系列状态，这包括：</p><div class="table-container"><table><thead><tr><th>状态名称</th><th>状态含义</th></tr></thead><tbody><tr><td>LISTEN</td><td>正在等待来自任何远程TCP和端口的连接请求</td></tr><tr><td>SYN-SENT</td><td>发送连接请求后等待匹配的连接请求</td></tr><tr><td>SYN-RECEIVED</td><td>已接收并发送连接请求后，等待确认连接请求确认</td></tr><tr><td>ESTABLISHED</td><td>一个开放的连接，接收到的数据可以传递给用户。连接的数据传输阶段的正常状态</td></tr><tr><td>FIN-WAIT-1</td><td>等待来自远程TCP的连接终止请求，或者等待先前发送的连接终止请求的确认</td></tr><tr><td>FIN-WAIT-2</td><td>等待来自远程TCP的连接终止请求</td></tr><tr><td>CLOSE-WAIT</td><td>正在等待本地用户的连接终止请求</td></tr><tr><td>CLOSING</td><td>等待来自远程TCP的连接终止请求确认</td></tr><tr><td>LAST-ACK</td><td>等待先前发送给远程TCP的连接终止请求的确认（包括对它的连接终止请求的确认）。</td></tr><tr><td>TIME-WAIT</td><td>等待足够的时间以确保远程TCP收到其连接终止请求的确认。</td></tr><tr><td>CLOSED</td><td>完全没有连接状态。</td></tr></tbody></table></div><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><img src="https://blog-image.nos-eastchina1.126.net/Fig2_UDPwork.jpg" alt=""></p><p>UDP是一种无连接且不可靠的传输协议，这两个端口用于标识源计算机和目标计算机内的端点。当不需要可靠的传送时，使用用户数据报协议代替TCP。但是，从不使用UDP发送重要数据，例如网页，数据库信息等。流媒体（例如视频，音频等）使用UDP，因为它提供速度。</p><p><strong>为什么UDP比TCP快？</strong></p><p>UDP比TCP快的原因是因为没有任何形式的流控制。UDP不会进行错误检查，错误纠正或确认。UDP只与速度有关。因此，当Internet上发送的数据受到冲突的影响时，就会出现错误。</p><p>UDP数据包称为8字节标头的用户数据报。用户数据报的格式如图3所示。在用户数据报中，前8个字节包含头信息，其余字节包含数据。</p><p><strong>UDP数据报</strong></p><p><img src="https://blog-image.nos-eastchina1.126.net/Fig3_udp_userdatagrams.jpg" alt=""></p><div class="table-container"><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><em>Source port number</em></td><td>正在传输数据的源主机使用的端口号。它是16位长。因此，端口号的范围是0到65,535。</td></tr><tr><td><em>Destination port number</em></td><td>正在获取数据的目标主机使用的端口号。它也是16位长，并且端口范围的数量与源主机相同。</td></tr><tr><td><em>length</em></td><td>字段是一个16位字段。它包含用户数据报，标头和数据的总长度。</td></tr><tr><td><em>Checksum</em></td><td>UDP校验和是可选的。它用于检测数据错误。如果该字段为零，则不计算校验和。然后计算得出的true字段包含1。</td></tr></tbody></table></div><p><strong>UDP的特征</strong></p><p>UDP的特征如下。</p><ul><li><p>端到端。UDP可以识别计算机上运行的特定进程。</p></li><li><p>不可靠的无连接传送</p></li></ul><p>UDP使用无连接通信设置。在这种情况下，UDP无需在发送数据之前建立连接。通信仅由数据段本身组成</p><ul><li><p>尽力而为</p></li><li><p>无应答，无顺序，无流量控制</p></li><li><p>可能会丢失，重复，延迟，乱序或失去连接</p></li><li><p>快速，低开销</p></li></ul><ol><li>适用于可靠的本地网络</li><li>RTP（实时传输协议）</li></ol><h3 id="在通讯中使用端口"><a href="#在通讯中使用端口" class="headerlink" title="在通讯中使用端口"></a>在通讯中使用端口</h3><p>接收到数据之后，计算机必须具有某种处理机制。考虑到用户已打开三个应用程序，例如Web浏览器，telnet会话和FTP会话。这三个应用程序都正在通过网络移动数据。因此，应该有某种机制来确定操作系统将哪些流量绑定到哪个应用程序。要处理这种情况，请使用网络端口。可用端口的范围是0到65535。其中0到1023是众所周知的端口 ，1023到49151是注册端口，49152到65535是动态端口。</p><p><img src="https://blog-image.nos-eastchina1.126.net/TCP_and_UDP_ports.jpg" alt=""></p><p>使用UDP协议的常见端口：</p><div class="table-container"><table><thead><tr><th>端口</th><th>服务</th></tr></thead><tbody><tr><td>7</td><td>Echo</td></tr><tr><td>9</td><td>Discard</td></tr><tr><td>11</td><td>Users</td></tr><tr><td>13</td><td>Daytime</td></tr><tr><td>17</td><td>Quote</td></tr><tr><td>19</td><td>Chargen</td></tr><tr><td>53</td><td>Nameserver</td></tr><tr><td>67</td><td>Bootps</td></tr><tr><td>68</td><td>Bootpc</td></tr><tr><td>69</td><td>TFTP</td></tr><tr><td>111</td><td>RPC</td></tr><tr><td>123</td><td>NTP</td></tr></tbody></table></div><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><p>在UDP连接中，客户端根据他们开始连接的程序设置唯一的源端口号。UDP不限于一对一交互。可以使用广播或多播寻址提供一对多交互。与单台服务器通信的许多客户端可以提供多对一交互。多对多交互只是这些技术的扩展。</p><h1 id="TCP-vs-UDP"><a href="#TCP-vs-UDP" class="headerlink" title="TCP vs UDP"></a>TCP vs UDP</h1><div class="table-container"><table><thead><tr><th></th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用（IP电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table></div><h1 id="如何测试一个端口是否通信"><a href="#如何测试一个端口是否通信" class="headerlink" title="如何测试一个端口是否通信"></a>如何测试一个端口是否通信</h1><p><code>telnet</code>和一些奇奇怪怪的工具我就不说了，如果您认为某些网站上的工具好用，请<kbd>Alt + F4</kbd>。</p><blockquote><p>如果是个人电脑，没所谓，用些小工具可以，但是Server的话可不能因为测试就随便装某些奇怪的东西。</p></blockquote><h2 id="在Windows上测试端口"><a href="#在Windows上测试端口" class="headerlink" title="在Windows上测试端口"></a>在Windows上测试端口</h2><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p><del>不是本文关注内容</del></p><h3 id="Test-NetConnection"><a href="#Test-NetConnection" class="headerlink" title="Test-NetConnection"></a>Test-NetConnection</h3><p>这是PowerShell提供的能力，支持<code>ping</code>,<code>TCP</code>，<code>traceroute</code></p><ul><li><p>ping测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Test-NetConnection</span> <span class="literal">-ComputerName</span> www.hit.edu.cn <span class="literal">-InformationLevel</span> Detailed</span><br></pre></td></tr></table></figure></li><li><p>路由测试(管理员权限运行)：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Test-NetConnection</span> <span class="literal">-ComputerName</span> www.hit.edu.cn <span class="literal">-DiagnoseRouting</span> <span class="literal">-InformationLevel</span> Detailed</span><br></pre></td></tr></table></figure></li><li><p>TCP端口连通性测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Test-NetConnection</span> <span class="literal">-ComputerName</span> www.hit.edu.cn <span class="literal">-Port</span> <span class="number">80</span>  <span class="literal">-InformationLevel</span> Detailed</span><br></pre></td></tr></table></figure></li><li><p>Trace测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Test-NetConnection</span> <span class="literal">-ComputerName</span> www.hit.edu.cn <span class="literal">-TraceRoute</span></span><br></pre></td></tr></table></figure></li></ul><p><code>InformationLevel Detailed</code>参数可选。</p><h2 id="在Linux-Unix上测试端口"><a href="#在Linux-Unix上测试端口" class="headerlink" title="在Linux/Unix上测试端口"></a>在Linux/Unix上测试端口</h2><p><del>telnet仍不不关注</del></p><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><p>需要使用包管理（apt/yum等）安装nc（netcat）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nc</span><br></pre></td></tr></table></figure><p>比如咱们测试192.168.1.1的TCP22端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -vz 192.168.1.1 22</span><br></pre></td></tr></table></figure><p>如果可以连通，会在标准输出回显<code>successded</code>。</p><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p><code>nmap</code>其实是一个网络扫描工具，但是也可以使用，首先也是安装nmap包,省略步骤，然后咱们继续测试22，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -v -p 22 192.168.1.1</span><br></pre></td></tr></table></figure><p>具体参数需要养成查阅<code>man</code>手册的好习惯。</p><h2 id="UDP端口测试"><a href="#UDP端口测试" class="headerlink" title="UDP端口测试"></a>UDP端口测试</h2><p>这才是写这个文档的目的，这个问题困扰很多人，如果有人问你<code>如何测试一个UDP端口是否可达？</code>其实这个问题就是个错误(虽然某些方式可以验证是否可达)，先说为什么，再说怎么做。</p><p>其实没有所谓的<strong>开放UDP端口</strong>，大多数人惯于思考的意义上（这是在回答，确认，我以接受连接，这一类意思）。UDP是无会话的，因此，所谓<code>Port</code>（读取：OS中IP协议栈中的UDP协议）将永远不会自行响应，也就是所谓的三次握手完成后，所响应的成功。（后面会说各种工具对于UDP端口的测试是如何实现的）</p><p>UDP端口有两种状态：监听与未监听。其实也就是某些进程是否打开套接字。后一种（未打开套接字）情况比较容易检测，因为系统使用`code=3（端口不可达）<strong>ICMP Destination Unrechable</strong>进行响应。但是，许多防火墙会丢弃这种数据包，因此如果没有得到任何回应，就不能确切知道端口是否处于这种状态。（ICMP也是无会话的，并不会重传），这句话是什么意思呢，就是<strong>ICMP Destination Unrechable</strong>代表的<strong>端口不可达</strong>数据包很有可能在途中某个地方被丢弃或丢失。</p><p>处于监听状态的<code>UDP</code>端口也可能根本不响应（正在监听它的进程只是接收数据包，并不传输任何内容），或者将某些内容发送回去。也就是说，如果什么也拿不回来，永远无法确定此端口的状态是什么。</p><p>有些啰嗦，说的是啥意思呢，就是不通不代表不通，也没有会话控制，无需重传。</p><p>那么测试的办法又是什么呢，像nc，nmap这些工具是如何判断UDP端口是否可达呢?</p><p>咱们试验一下：</p><p>实验用到的工具： <code>nc</code>、<code>tcpdump/wireshark</code>、<code>nmap</code>。</p><p>首先，模拟一个监听的UDP端口，并使用<code>tcpdump</code>或<code>wireshark</code>抓包，另一个客户端请求这个端口。</p><ul><li><p>服务端使用<code>netcat</code>监听udp端口6666：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -ul 6666 <span class="comment"># 监听udp6666端口</span></span><br></pre></td></tr></table></figure></li><li><p>服务端抓包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i enp0s31f6 udp port 6666 -X</span><br></pre></td></tr></table></figure></li><li><p>防火墙先不开通udp6666：</p></li></ul><p>现在客户端可以使用nc或nmap测试端口了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -uv SERVER_IP 6666</span><br></pre></td></tr></table></figure><p><code>Connection to 192.168.1.182 6777 port [udp/*] succeeded!</code></p><p>这时可以键入字符，看server端是否接受到对应输入的字符；</p><p>抓包同时查看，</p><p>具体不贴图了，多个电脑倒来倒去麻烦，其实目的就是看下</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>其实UDP端口测试，如无外接因素影响的话，nc nmap都可以简单的检测，不过，如果主机防火墙或链路中存在防火墙，这就不确定了。所以下次，如果有人问你如何测试UDP端口，请送上一枚斜眼币。</p><h1 id="基于UDP的可靠传输协议"><a href="#基于UDP的可靠传输协议" class="headerlink" title="基于UDP的可靠传输协议"></a>基于UDP的可靠传输协议</h1><p>TCP/IP协议栈中，TCP和UDP属于传输层，负责实现数据的传输。其中TCP是面向连接的和基于单个字节流的、保证顺序的可靠传输协议，UDP是无连接的、不可靠的、面向报文的协议。</p><p>在实际应用中，TCP由于简单可靠，被大部分应用层协议使用，特别是HTTP，所以占据了互联网流量的主要部分。由于TCP的广泛应用，并且是实现在操作系统中，在参数和算法调整上比较受限，难以进行一些激进的改进和定制。另外TCP的NAT穿越比较困难，一些P2P应用也只能使用UDP，所以就有了各种各样的可靠UDP协议。</p><h2 id="可靠UDP协议"><a href="#可靠UDP协议" class="headerlink" title="可靠UDP协议"></a>可靠UDP协议</h2><h3 id="UDT-UDP-based-Data-Transfer-Protocol"><a href="#UDT-UDP-based-Data-Transfer-Protocol" class="headerlink" title="UDT(UDP-based Data Transfer Protocol)"></a>UDT(UDP-based Data Transfer Protocol)</h3><p>UDT的主要目的是支持高速广域网上的海量数据传输，所以除了在UDP之上实现类似TCP的协议和算法之外，UDT还对TCP的拥塞算法做了一些细节上的调整，包括Negative-ACK(NAK)、ACK to ACK(ACK2)、基于对数的动态AIMD等。不过UDT的重传效率较低，无效报文，实际效果并不理想。</p><h3 id="KCP"><a href="#KCP" class="headerlink" title="KCP"></a>KCP</h3><p>KCP是一个很简单的ARQ的实现，包括选择重传和快重传等机制，对上层提供一个可靠的字节流。应用层可以使用多流复用的框架来实现对多个流的支持。另外，KCP增加了可配置启用的加密和FEC选项，FEC用的是Reed-Solomon纠删码，例如可以配置发送10%的冗余数据，来减少丢包时需要的重传，从而降低数据传输的延时。</p><h3 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h3><p>QUIC是Google实现的一种可靠UDP传输协议，并且已经被选择作为HTTP/3的基础。它的特点有：</p><ul><li>内建安全性，集成TLS</li><li>连接建立过程和TLS协商过程合并，减少往返请求次数，提高连接速度</li><li>集成多种拥塞算法，包括最新的BBR</li><li>多流支持，每个流有独立的拥塞控制，避免单个流中的丢包阻塞其它所有流（Head-of-line Blocking问题），更好的支持类似HTTP/2中的乱序请求</li><li>连接迁移：QUIC可以通过连接ID来唯一标识一个连接，当用户在有线、无线、移动网络之间切换时，可以保持上层连接的有效性，不需要再进行重连。</li></ul><p>另外，早期的QUIC还使用了一种基于异或的FEC算法，不过在新版本中已经去掉。</p><h3 id="uTP"><a href="#uTP" class="headerlink" title="uTP"></a>uTP</h3><p>uTP是BitTorrent中新增加的一种UDP传输协议，主要特点是使用了LEDBAT（Low Extra Delay Background Transport）拥塞算法。这种算法基于延时来检测网络拥塞，可以更早的探测到拥塞和更早的以及更大幅度的进行避让，从而避免影响用户上网操作的进行，保持后台下载跟前台操作的和平共处。</p><h3 id="FASP-Aspera"><a href="#FASP-Aspera" class="headerlink" title="FASP(Aspera)"></a>FASP(Aspera)</h3><p>FASP是Aspera公司（已被IBM收购）的私有UDP解决方案，提供加密的可靠传输，拥塞算法估计是类似BBR，直接使用RTT和带宽来作为调节速度的参考。但FASP主要用于高速的文件传输，所以不需要保证报文的顺序，避免乱序重组时占用的内存开销，而且也避免了因为内存有限而丢弃的部分乱序报文，从而减少不必要的重传，提高传输速度。也就是说，完全避免了Head-of-line Blocking问题。</p><h3 id="SCTP（Stream-Control-Transmission-Protocol，流控制传输协议）"><a href="#SCTP（Stream-Control-Transmission-Protocol，流控制传输协议）" class="headerlink" title="SCTP（Stream Control Transmission Protocol，流控制传输协议）"></a>SCTP（Stream Control Transmission Protocol，流控制传输协议）</h3><p>准确的说，SCTP不是一种可靠UDP协议，而是一种跟TCP/UDP平级的传输层协议，是IETF在2000年指定的标准协议。目前Linux和部分UNIX已经集成，Windows和Mac需要使用第三方包来实现。SCTP最初主要用于电信系统，此外，WebRTC中的DataChannel也用到这个协议。它的特点有：</p><ul><li>跟TCP一样面向连接，提供可靠传输</li><li>跟UDP一样面向消息</li><li>多流支持</li><li>每个流可以配置成接受有序或无序的消息</li><li>Multi-Homing：可以配置多个地址，利用多条网络传输通道</li><li>更好的安全性：要求四次握手，避免TCP的SYN Flooding攻击</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCP与UDP连接&quot;&gt;&lt;a href=&quot;#TCP与UDP连接&quot; class=&quot;headerlink&quot; title=&quot;TCP与UDP连接&quot;&gt;&lt;/a&gt;TCP与UDP连接&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 看结果请直接拉到底↓&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="Network" scheme="https://www.sysctl.me/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>iTerm快捷键</title>
    <link href="https://www.sysctl.me/2020/01/28/iterm-study-notes/"/>
    <id>https://www.sysctl.me/2020/01/28/iterm-study-notes/</id>
    <published>2020-01-28T05:11:30.000Z</published>
    <updated>2020-02-01T13:13:34.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签页和Windows"><a href="#标签页和Windows" class="headerlink" title="标签页和Windows"></a>标签页和Windows</h1><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th></tr></thead><tbody><tr><td>新标签</td><td><code>⌘</code> + <code>T</code></td></tr><tr><td>关闭标签页或窗口</td><td><code>⌘</code>+ <code>W</code> （与许多Mac应用程序相同）</td></tr><tr><td>转到标签</td><td><code>⌘</code>+ <code>Number Key</code> （即：<code>⌘2</code>是第二个标签）</td></tr><tr><td>转到按方向拆分窗格</td><td><code>⌘</code>+ <code>Option</code>+<code>Arrow Key</code></td></tr><tr><td>循环iTerm Windows</td><td><code>⌘</code>+ <code>backtick</code> （适用于所有Mac应用程序，可与台式机/任务控制一起使用）</td></tr><tr><td><strong>分裂</strong></td><td></td></tr><tr><td>垂直拆分窗口（相同的配置文件）</td><td><code>⌘</code> + <code>D</code></td></tr><tr><td>水平分割视窗（相同的设定档）</td><td><code>⌘</code>+ <code>Shift</code>+ <code>D</code> （助记符：shift是一个宽水平键）</td></tr><tr><td><strong>移动</strong></td><td></td></tr><tr><td>用鼠标移动窗格</td><td><code>⌘</code>+ <code>Alt</code>+ <code>Shift</code>，然后从任何地方拖动窗格</td></tr><tr><td><strong>全屏</strong></td><td></td></tr><tr><td>全屏</td><td><code>⌘</code>+ <code>Enter</code></td></tr><tr><td>最大化窗格</td><td><code>⌘</code>+ <code>Shift</code>+ <code>Enter</code> （与全屏一起使用可以使窗格全屏化！）</td></tr><tr><td>调整窗格大小</td><td><code>Ctrl</code>+ <code>⌘</code>+ <code>Arrow</code>（假设您尚未将此映射到其他对象）</td></tr><tr><td><strong>较少使用</strong></td><td></td></tr><tr><td>按使用顺序转到拆分窗格</td><td><code>⌘</code>+ <code>]</code>，<code>⌘</code>+<code>[</code></td></tr><tr><td>水平拆分窗口（新配置文件）</td><td><code>Option</code>+ <code>⌘</code>+<code>H</code></td></tr><tr><td>垂直分割窗口（新配置文件）</td><td><code>Option</code>+ <code>⌘</code>+<code>V</code></td></tr><tr><td>上一个标签</td><td><code>⌘</code>+ <code>Left Arrow</code> （我通常按标签号移动）</td></tr><tr><td>下一个标签</td><td><code>⌘</code>+ <code>Right Arrow</code></td></tr><tr><td>转到窗口</td><td><code>⌘</code>+ <code>Option</code>+<code>Number</code></td></tr></tbody></table></div><a id="more"></a><h1 id="最喜欢的Shell键组合"><a href="#最喜欢的Shell键组合" class="headerlink" title="最喜欢的Shell键组合"></a>最喜欢的Shell键组合</h1><p>这些可能有助于使您更快地使用Shell，但实际上这并不是iTerm2特有的。我假设您在Mac上使用bash或zsh。有很多技巧，但是我经常使用这些技巧。有时还有多种方法可以做到，因此请采用您最喜欢的方法。</p><p>希望其中一些改变您的生活。:)</p><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th><th><strong>采用</strong></th></tr></thead><tbody><tr><td>删除以开始行（收藏夹）</td><td><code>Ctrl</code> + <code>U</code></td><td>使用它可以重新开始键入而无需按Ctrl-C</td></tr><tr><td>删除到行尾（收藏夹）</td><td><code>Ctrl</code> + <code>K</code></td><td>将其与命令历史记录一起使用可重复命令并最后更改一件事！</td></tr><tr><td>重复上一条命令</td><td><code>Ctrl</code> + <code>Up Arrow</code></td><td>上下循环浏览历史记录。 <code>Ctrl-R</code>如果您知道要查找的字符串，则速度会更快。</td></tr><tr><td>在一条线上来回移动</td><td><code>Arrow Keys</code></td><td>这会让您离开主场，但很容易记住</td></tr><tr><td>一行一行地来回移动</td><td><code>Ctrl</code> + <code>Arrow Keys</code></td><td>跳到一个单词以纠正拼写错误或稍作更改即可“再次运行”的快速方法</td></tr><tr><td>删除前一个词（在shell中）</td><td><code>Ctrl</code> + <code>W</code></td><td>用词删除的速度更快。尤其是当您的最后一个命令因单个错字或其他错误而出错时。</td></tr><tr><td>清除萤幕</td><td><code>Ctrl</code> + <code>L</code></td><td>这是告诉外壳程序执行此操作。如果这不起作用，<code>⌘</code>+ <code>K</code>会告诉iTerm做到这一点，即当您不在外壳中时，它会起作用。使用它而不是<code>clear</code>一遍又一遍地输入。</td></tr></tbody></table></div><h1 id="更快地移动"><a href="#更快地移动" class="headerlink" title="更快地移动"></a>更快地移动</h1><p>在iterm中，有很多Shell快捷方式都可以使用，因此最好学习这些快捷方式，因为箭头键，Home / End键和Mac等效键并不总是有效。例如，<code>⌘</code>+ <code>Left Arrow</code>通常与<code>Home</code> （转到当前行的开头）相同，但是在shell中不起作用。Home可在许多应用程序中使用，但可以带您离开主行。</p><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th></tr></thead><tbody><tr><td>移至行首</td><td><code>Ctrl</code>+ <code>A</code>或<code>Home</code></td></tr><tr><td>移至行尾</td><td><code>Ctrl</code>+ <code>E</code>或<code>End</code></td></tr><tr><td>前进一个字</td><td><code>Option</code> + <code>F</code></td></tr><tr><td>向后移动一个字</td><td><code>Option</code> + <code>B</code></td></tr><tr><td>设定标记</td><td><code>⌘</code> + <code>M</code></td></tr><tr><td>跳至标记</td><td><code>⌘</code> + <code>J</code></td></tr><tr><td>逐行移动（这是一个shell程序，但可以通过）</td><td><code>Ctrl</code> + <code>Left/Right Arrow</code></td></tr><tr><td>使用鼠标进行光标跳转（shell和vim-可能取决于配置）</td><td><code>Option</code> + <code>Left Click</code></td></tr></tbody></table></div><h1 id="使用iTerm复制和粘贴而不使用鼠标"><a href="#使用iTerm复制和粘贴而不使用鼠标" class="headerlink" title="使用iTerm复制和粘贴而不使用鼠标"></a>使用iTerm复制和粘贴而不使用鼠标</h1><p>我不会使用太多此功能。</p><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th></tr></thead><tbody><tr><td>进入复制模式</td><td><code>Shift</code>+ <code>⌘</code>+<code>C</code></td></tr><tr><td>在复制模式下进入字符选择模式</td><td><code>Ctrl</code> + <code>V</code></td></tr><tr><td>在复制模式下移动光标</td><td><code>HJKL</code> vim动作或箭头键</td></tr><tr><td>在复制模式下复制文字</td><td><code>Ctrl</code> + <code>K</code></td></tr></tbody></table></div><p>复制动作进入普通系统剪贴板，您可以像粘贴普通剪贴板那样粘贴。</p><h1 id="搜索命令历史"><a href="#搜索命令历史" class="headerlink" title="搜索命令历史"></a>搜索命令历史</h1><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th></tr></thead><tbody><tr><td>键入时搜索</td><td><code>Ctrl</code>+ <code>R</code>并输入搜索词；重复<code>Ctrl</code>+ <code>R</code>以遍历结果</td></tr><tr><td>搜索最后记住的搜索词</td><td><code>Ctrl</code>+ <code>R</code>两次</td></tr><tr><td>在当前历史记录条目中结束搜索</td><td><code>Ctrl</code> + <code>Y</code></td></tr><tr><td>取消搜索并恢复原始行</td><td><code>Ctrl</code> + <code>G</code></td></tr></tbody></table></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>捷径</strong></th></tr></thead><tbody><tr><td>清除屏幕/窗格（<code>Ctrl + L</code>无法使用时）</td><td><code>⌘</code>+ <code>K</code> （我一直都在用）</td></tr><tr><td>将命令广播到窗口中的所有窗格（必要时不错！）</td><td><code>⌘</code>+ <code>Alt</code>+ <code>I</code>（再次进行切换）</td></tr><tr><td>查找光标</td><td><code>⌘</code>+ <code>/</code> <em>或使用易于查看的主题或光标形状</em></td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标签页和Windows&quot;&gt;&lt;a href=&quot;#标签页和Windows&quot; class=&quot;headerlink&quot; title=&quot;标签页和Windows&quot;&gt;&lt;/a&gt;标签页和Windows&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;捷径&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;新标签&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关闭标签页或窗口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;W&lt;/code&gt; （与许多Mac应用程序相同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转到标签&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Number Key&lt;/code&gt; （即：&lt;code&gt;⌘2&lt;/code&gt;是第二个标签）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转到按方向拆分窗格&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;Arrow Key&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;循环iTerm Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;backtick&lt;/code&gt; （适用于所有Mac应用程序，可与台式机/任务控制一起使用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;分裂&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;垂直拆分窗口（相同的配置文件）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;水平分割视窗（相同的设定档）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Shift&lt;/code&gt;+ &lt;code&gt;D&lt;/code&gt; （助记符：shift是一个宽水平键）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;移动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用鼠标移动窗格&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Alt&lt;/code&gt;+ &lt;code&gt;Shift&lt;/code&gt;，然后从任何地方拖动窗格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;全屏&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全屏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大化窗格&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Shift&lt;/code&gt;+ &lt;code&gt;Enter&lt;/code&gt; （与全屏一起使用可以使窗格全屏化！）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;调整窗格大小&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt;+ &lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Arrow&lt;/code&gt;（假设您尚未将此映射到其他对象）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;较少使用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按使用顺序转到拆分窗格&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;]&lt;/code&gt;，&lt;code&gt;⌘&lt;/code&gt;+&lt;code&gt;[&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;水平拆分窗口（新配置文件）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Option&lt;/code&gt;+ &lt;code&gt;⌘&lt;/code&gt;+&lt;code&gt;H&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;垂直分割窗口（新配置文件）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Option&lt;/code&gt;+ &lt;code&gt;⌘&lt;/code&gt;+&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上一个标签&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Left Arrow&lt;/code&gt; （我通常按标签号移动）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;下一个标签&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Right Arrow&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转到窗口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;⌘&lt;/code&gt;+ &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://www.sysctl.me/categories/Tools/"/>
    
    
      <category term="Terminal" scheme="https://www.sysctl.me/tags/Terminal/"/>
    
      <category term="Effectiveness" scheme="https://www.sysctl.me/tags/Effectiveness/"/>
    
  </entry>
  
  <entry>
    <title>Tmux之道</title>
    <link href="https://www.sysctl.me/2020/01/27/The-Tao-of-tmux/"/>
    <id>https://www.sysctl.me/2020/01/27/The-Tao-of-tmux/</id>
    <published>2020-01-27T12:11:30.000Z</published>
    <updated>2020-02-01T13:13:34.276Z</updated>
    
    <content type="html"><![CDATA[<p>tmux对控制台而言，桌面对GUI应用而言，这是本文维度内的世界。在tmux中，可以：</p><ul><li>在终端内部执行多任务，运行多个应用程序。</li><li>在同一窗口中有多个命令行（窗格）。</li><li>工作区（会话）中有多个窗口（窗口）。</li><li>在多个工作区之间切换，例如虚拟桌面。</li></ul><h1 id="思考TMUX"><a href="#思考TMUX" class="headerlink" title="思考TMUX"></a>思考TMUX</h1><p>基于文本的窗口管理器</p><a id="more"></a><div class="table-container"><table><thead><tr><th><strong>多路复用器</strong></th><th><strong>“桌面”-说</strong></th><th></th></tr></thead><tbody><tr><td>复用器</td><td>多任务</td><td>同时进行多个应用程序。</td></tr><tr><td>届会</td><td>桌面</td><td>应用程序在这里可见</td></tr><tr><td>窗口</td><td>虚拟桌面或应用程序</td><td>拥有自己屏幕的台式机</td></tr><tr><td>窗格</td><td>应用</td><td>执行操作</td></tr></tbody></table></div><p><img src="https://blog-image.nos-eastchina1.126.net/tmux01.gif" alt=""></p><ul><li>1个服务器。<ul><li>有一个或更多会话。<ul><li>有一个或更多Window。<ul><li>有一个或更多Pane。</li></ul></li></ul></li></ul></li></ul><h2 id="CLI-Power"><a href="#CLI-Power" class="headerlink" title="CLI Power"></a>CLI Power</h2><p>通过将一个终端分成多个终端，可以在同一屏幕上运行多个应用程序或终端。</p><p>一个屏幕可以用于编辑文件，另一个用户<code>tail -F</code>日志文件。</p><p><img src="https://blog-image.nos-eastchina1.126.net/tmux02.gif" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/tmux03.gif" alt=""></p><p>tmux支持任意数量的终端。</p><p><img src="https://blog-image.nos-eastchina1.126.net/tmux04.gif" alt=""></p><p>可以在创建的窗口之间切换。</p><h2 id="然后恢复一切"><a href="#然后恢复一切" class="headerlink" title="然后恢复一切"></a>然后恢复一切</h2><p>可以让tmux和所有应用程序运行（分离），注销，做一个三明治，然后重新（附加），所有应用仍在运行！</p><p><img src="https://blog-image.nos-eastchina1.126.net/tmux05.gif" alt=""></p><h2 id="管理工作流程"><a href="#管理工作流程" class="headerlink" title="管理工作流程"></a>管理工作流程</h2><ul><li>系统管理员监控日志和服务。</li><li>程序员喜欢在附近使用cli打开编辑器。</li></ul><p>可以在tmux会话内部启动运行在远程服务器上的应用程序，将它们分离，然后在下一次重新绑定到您的思路和工作。</p><p>多任务处理，保留您的想法。</p><h1 id="安装TMUX"><a href="#安装TMUX" class="headerlink" title="安装TMUX"></a>安装TMUX</h1><p>tmux打包在大多数Linux和BSD系统上。</p><p>要获得有关如何在系统上安装tmux的最新结果，请执行“如何在<my distro>上安装tmux”，因为方向会有所变化，并且在发行版之间略有不同。</p><p>本文档是针对版本<strong>1.8</strong>编写的。重要的是，您必须拥有最新的稳定版tmux。可在<a href="http://tmux.sourceforge.net/" target="_blank" rel="noopener">tmux主页</a>上查看最新的稳定版本。</p><p><strong>Mac OS X</strong>用户可以通过<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a>，<a href="http://fink.thetis.ig42.org/" target="_blank" rel="noopener">fink</a>或<a href="http://www.brew.sh/" target="_blank" rel="noopener">Homebrew</a>（aka brew）安装最新的tmux稳定版本 。</p><p>如果<strong>从源代码编译</strong>，则依赖项为<a href="http://www.monkey.org/~provos/libevent/" target="_blank" rel="noopener">libevent</a>和 <a href="http://invisible-island.net/ncurses/" target="_blank" rel="noopener">ncurses</a>。</p><h2 id="使用TMUX"><a href="#使用TMUX" class="headerlink" title="使用TMUX"></a>使用TMUX</h2><p>开始一个新的会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><p>这就是是您进入tmux会话所需要的全部。</p><h3 id="前缀键"><a href="#前缀键" class="headerlink" title="前缀键"></a>前缀键</h3><p>Tmux热键必须以特殊方式按下。请仔细阅读，然后自己尝试。</p><p>首先，按住前缀键。默认是<kbd>ctrl</kbd> + <kbd>b</kbd>。</p><p>然后停下来。不到一秒钟，键入下一步。</p><p><code>C-b o</code>表示： 同时按住<kbd>ctrl</kbd> + <kbd>b</kbd>。释放，然后按<kbd>o</kbd>。</p><p>记住，前缀+快捷键!</p><h3 id="会话名称"><a href="#会话名称" class="headerlink" title="会话名称"></a>会话名称</h3><p>会话可以在创建时命名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-session [-s session-name]</span><br></pre></td></tr></table></figure><p>创建后可以重命名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-session &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>快捷键是：<kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>$</kbd></p><h3 id="窗口名称"><a href="#窗口名称" class="headerlink" title="窗口名称"></a>窗口名称</h3><p>Windows可以在创建时命名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window [-n window-name]</span><br></pre></td></tr></table></figure><p>创建后可以重命名windows。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-window &lt;new-name&gt;</span><br></pre></td></tr></table></figure><p>快捷键是：<kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>,</kbd></p><h3 id="创建新的窗口"><a href="#创建新的窗口" class="headerlink" title="创建新的窗口"></a>创建新的窗口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window [-n window-name]</span><br></pre></td></tr></table></figure><p>快捷键是：<kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>c</kbd></p><h3 id="遍历窗口"><a href="#遍历窗口" class="headerlink" title="遍历窗口"></a>遍历窗口</h3><p>按号码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux select-window</span><br></pre></td></tr></table></figure><p>下一个:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux next-window</span><br></pre></td></tr></table></figure><p>前一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux  previous-window</span><br></pre></td></tr></table></figure><p>最后一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux last-window</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>快捷键</th><th>动作</th></tr></thead><tbody><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>n</kbd></td><td>转到下一个窗口。</td></tr><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>p</kbd></td><td>转到上一个窗口。</td></tr><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>w</kbd></td><td>交互选择当前窗口。</td></tr><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>0-9</kbd></td><td>选择窗口0到9。</td></tr><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>M-n</kbd></td><td>使用铃声或活动标记移动到下一个窗口。</td></tr><tr><td><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>M-p</kbd></td><td>使用铃声或活动标记移到上一个窗口。</td></tr></tbody></table></div><h3 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a>移动窗口</h3><p>移动窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux move-window [-t dst-window]</span><br></pre></td></tr></table></figure><p>交换窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux swap-window [-t dst-window]</span><br></pre></td></tr></table></figure><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>.</kbd></p><h3 id="移动窗格"><a href="#移动窗格" class="headerlink" title="移动窗格"></a>移动窗格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux move-pane [-t dst-pane]</span><br></pre></td></tr></table></figure><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>{</kbd>或<kbd>}</kbd></p><h3 id="遍历窗格"><a href="#遍历窗格" class="headerlink" title="遍历窗格"></a>遍历窗格</h3><p>在窗格之间移动的快捷方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux last-window</span><br><span class="line">tmux next-window</span><br></pre></td></tr></table></figure><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>↑</kbd>或<kbd>↓</kbd><kbd>←</kbd>或<kbd>→</kbd></p><h3 id="杀掉窗口"><a href="#杀掉窗口" class="headerlink" title="杀掉窗口"></a>杀掉窗口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">kill</span>-window [-t target-window]</span><br></pre></td></tr></table></figure><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>&amp;</kbd></p><h3 id="杀掉窗格"><a href="#杀掉窗格" class="headerlink" title="杀掉窗格"></a>杀掉窗格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">kill</span>-pane [-t target-pane]</span><br></pre></td></tr></table></figure><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>x</kbd></p><h3 id="分隔窗口为窗格"><a href="#分隔窗口为窗格" class="headerlink" title="分隔窗口为窗格"></a>分隔窗口为窗格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window [-c start-directory] &lt;shell-command&gt;</span><br></pre></td></tr></table></figure><p>tmux窗口可以分为多个窗格。</p><p><kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>%</kbd>或<kbd>”</kbd></p><h2 id="配置TMUX"><a href="#配置TMUX" class="headerlink" title="配置TMUX"></a>配置TMUX</h2><p>tmux可以通过<code>~/.tmux.conf</code>配置文件进行配置。</p><h3 id="vi样式复制和粘贴"><a href="#vi样式复制和粘贴" class="headerlink" title="vi样式复制和粘贴"></a>vi样式复制和粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VI copypaste mode</span></span><br><span class="line"><span class="built_in">set</span>-window-option -g mode-keys vi</span><br><span class="line"><span class="built_in">bind</span>-key -t vi-copy <span class="string">'v'</span> begin-selection</span><br><span class="line"><span class="built_in">bind</span>-key -t vi-copy <span class="string">'y'</span> copy-selection</span><br></pre></td></tr></table></figure><h3 id="积极调整客户端大小"><a href="#积极调整客户端大小" class="headerlink" title="积极调整客户端大小"></a>积极调整客户端大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setw -g aggressive-resize on</span><br></pre></td></tr></table></figure><h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><p>绑定快捷键：<kbd>ctrl</kbd> + <kbd>b</kbd>，<kbd>r</kbd></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display-message <span class="string">"Config reloaded."</span></span><br></pre></td></tr></table></figure><h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><p>mux允许配置状态行，以显示<code>stdout</code>应用程序的系统信息，窗口列表，甚至管道。</p><p>您可以将bash命令传递到tmux状态行，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(shell-command)</span><br></pre></td></tr></table></figure><p>因此，如果将<code>/usr/local/bin/tmux-mem-cpu-load</code> stats 输出到<code>stdout</code>，则将<code>$(tmux-mem-cpu-load)</code>第一行输出到状态栏，间隔由<code>status-interval</code>决定:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -g status-interval 1</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container"><table><thead><tr><th>捷径</th><th>行动</th></tr></thead><tbody><tr><td><code>b</code></td><td>将前缀密钥（Cb）发送到应用程序。</td></tr><tr><td><code>o</code></td><td>向前旋转当前窗口中的窗格。</td></tr><tr><td><code>z</code></td><td>挂起tmux客户端。</td></tr><tr><td><code>!</code></td><td>将当前窗格移出窗口。</td></tr><tr><td><code>&quot;</code></td><td>将当前窗格分为两个，顶部和底部。</td></tr><tr><td><code>#</code></td><td>列出所有粘贴缓冲区。</td></tr><tr><td><code>$</code></td><td>重命名当前会话。</td></tr><tr><td><code>%</code></td><td>将当前窗格分为左右两部分。</td></tr><tr><td><code>&amp;</code></td><td>杀死当前窗口。</td></tr><tr><td><code>&#39;</code></td><td>提示选择窗口索引。</td></tr><tr><td><code>,</code></td><td>重命名当前窗口。</td></tr><tr><td><code>-</code></td><td>删除最近复制的文本缓冲区。</td></tr><tr><td><code>.</code></td><td>提示输入索引以移动当前窗口。</td></tr><tr><td><code>0 to 9</code></td><td>选择窗口0到9。</td></tr><tr><td><code>:</code></td><td>输入tmux命令提示符。</td></tr><tr><td><code>;</code></td><td>移至先前活动的窗格。</td></tr><tr><td><code>=</code></td><td>从列表中选择要交互式粘贴的缓冲区。</td></tr><tr><td><code>?</code></td><td>列出所有键绑定。</td></tr><tr><td><code>D</code></td><td>选择要分离的客户端。</td></tr><tr><td><code>[</code></td><td>进入复制模式以复制文本或查看历史记录。</td></tr><tr><td><code>]</code></td><td>粘贴最近复制的文本缓冲区。</td></tr><tr><td><code>c</code></td><td>创建一个新窗口。</td></tr><tr><td><code>d</code></td><td>分离当前客户端。</td></tr><tr><td><code>f</code></td><td>提示在打开的窗口中搜索文本。</td></tr><tr><td><code>i</code></td><td>显示有关当前窗口的一些信息。</td></tr><tr><td><code>l</code></td><td>移至先前选择的窗口。</td></tr><tr><td><code>n</code></td><td>转到下一个窗口。</td></tr><tr><td><code>o</code></td><td>选择当前窗口中的下一个窗格。</td></tr><tr><td><code>p</code></td><td>转到上一个窗口。</td></tr><tr><td><code>q</code></td><td>简要显示窗格索引。</td></tr><tr><td><code>r</code></td><td>强制重画连接的客户端。</td></tr><tr><td><code>s</code></td><td>以交互方式为连接的客户端选择一个新会话。</td></tr><tr><td><code>L</code></td><td>将连接的客户端切换回上一个会话。</td></tr><tr><td><code>t</code></td><td>显示时间。</td></tr><tr><td><code>w</code></td><td>交互选择当前窗口。</td></tr><tr><td><code>x</code></td><td>杀死当前窗格。</td></tr><tr><td><code>{</code></td><td>将当前窗格与上一个窗格交换。</td></tr><tr><td><code>}</code></td><td>将当前窗格与下一个窗格交换。</td></tr><tr><td><code>~</code></td><td>显示来自tmux的先前消息（如果有）。</td></tr><tr><td><code>Page Up</code></td><td>进入复印模式并向上滚动一页。</td></tr><tr><td><code>Up, Down</code></td><td>切换到上方，下方，左侧或左侧的窗格</td></tr><tr><td><code>Left, Right</code></td><td>当前窗格的右侧。</td></tr><tr><td><code>M-1 to M-5</code></td><td>将窗格按以下五个预设布局之一进行排列：水平，偶数垂直，水平，主垂直或平铺。</td></tr><tr><td><code>M-n</code></td><td>使用铃声或活动标记移动到下一个窗口。</td></tr><tr><td><code>M-o</code></td><td>向后旋转当前窗口中的窗格。</td></tr><tr><td><code>M-p</code></td><td>使用铃声或活动标记移到上一个窗口。</td></tr><tr><td><code>C-Up, C-Down</code></td><td>以一个单元格为单位调整当前窗格的大小。</td></tr><tr><td><code>C-Left, C-Right</code></td><td></td></tr><tr><td><code>M-Up, M-Down</code></td><td>以五个单元格为单位调整当前窗格的大小。</td></tr><tr><td><code>M-Left, M-Right</code></td><td></td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tmux对控制台而言，桌面对GUI应用而言，这是本文维度内的世界。在tmux中，可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在终端内部执行多任务，运行多个应用程序。&lt;/li&gt;
&lt;li&gt;在同一窗口中有多个命令行（窗格）。&lt;/li&gt;
&lt;li&gt;工作区（会话）中有多个窗口（窗口）。&lt;/li&gt;
&lt;li&gt;在多个工作区之间切换，例如虚拟桌面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;思考TMUX&quot;&gt;&lt;a href=&quot;#思考TMUX&quot; class=&quot;headerlink&quot; title=&quot;思考TMUX&quot;&gt;&lt;/a&gt;思考TMUX&lt;/h1&gt;&lt;p&gt;基于文本的窗口管理器&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://www.sysctl.me/categories/Tools/"/>
    
    
      <category term="Terminal" scheme="https://www.sysctl.me/tags/Terminal/"/>
    
      <category term="Effectiveness" scheme="https://www.sysctl.me/tags/Effectiveness/"/>
    
  </entry>
  
  <entry>
    <title>Tmux学习笔记</title>
    <link href="https://www.sysctl.me/2020/01/27/tmux-study-notes/"/>
    <id>https://www.sysctl.me/2020/01/27/tmux-study-notes/</id>
    <published>2020-01-27T12:11:30.000Z</published>
    <updated>2020-02-01T13:13:34.277Z</updated>
    
    <content type="html"><![CDATA[<p><code>tmux</code>对我们的工作流程和<code>vim</code>一样重要，它对于会话和窗口的管理，能更高效的工作。</p><h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>创建一个名为<code>session_name</code>的新<code>tmux</code>会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s session_name</span><br></pre></td></tr></table></figure><p>将现有<code>tmux</code>会话附加到名为<code>session_name</code>的<code>tmux</code>会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t session_name</span><br></pre></td></tr></table></figure><p>切换到名为<code>session_name</code>的现有会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux switch -t session_name</span><br></pre></td></tr></table></figure><p>列出现有<code>tmux</code>会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-sessions</span><br></pre></td></tr></table></figure><p>分离当前连接的会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>d</kbd></em></p><a id="more"></a><h1 id="窗口（Window）管理"><a href="#窗口（Window）管理" class="headerlink" title="窗口（Window）管理"></a>窗口（Window）管理</h1><p><code>tmux</code>具有选项卡界面，称为<code>windows</code>，可以重命名使用的所有窗口，这样，可以通过上线文而不是正在运行的程序来识别窗口。</p><p>创建一个新窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>c</kbd></em></p><p>根据索引移至窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux selsec-window -t :0-9</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>Number(0-9)</kbd></em></p><p>重命名当前窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-window</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>,</kbd></em></p><h1 id="窗格（Pane）管理"><a href="#窗格（Pane）管理" class="headerlink" title="窗格（Pane）管理"></a>窗格（Pane）管理</h1><p>窗口让我们不必切换应用程序即可切换上下文。</p><p>将当前窗口分为两个垂直窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>”</kbd></em></p><p>将当前窗口分为两个水平窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window -h</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>%</kbd></em></p><p>在指定方向上将窗口与另一个交换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux swap-pane -[UDLR]</span><br></pre></td></tr></table></figure><p><em>快捷键是：<kbd>control</kbd> + <kbd>b</kbd> ，然后键入<kbd>{</kbd>或<kbd>}</kbd></em></p><h1 id="有用的命名"><a href="#有用的命名" class="headerlink" title="有用的命名"></a>有用的命名</h1><p>列出每个绑定:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-keys</span><br></pre></td></tr></table></figure><p>列出<code>tmux</code>命令及参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-commands</span><br></pre></td></tr></table></figure><p>列出每个会话，窗口，窗格，Pid等:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux info</span><br></pre></td></tr></table></figure><p>重新加载当前tmux配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">source</span>-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;tmux&lt;/code&gt;对我们的工作流程和&lt;code&gt;vim&lt;/code&gt;一样重要，它对于会话和窗口的管理，能更高效的工作。&lt;/p&gt;
&lt;h1 id=&quot;会话管理&quot;&gt;&lt;a href=&quot;#会话管理&quot; class=&quot;headerlink&quot; title=&quot;会话管理&quot;&gt;&lt;/a&gt;会话管理&lt;/h1&gt;&lt;p&gt;创建一个名为&lt;code&gt;session_name&lt;/code&gt;的新&lt;code&gt;tmux&lt;/code&gt;会话：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new -s session_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将现有&lt;code&gt;tmux&lt;/code&gt;会话附加到名为&lt;code&gt;session_name&lt;/code&gt;的&lt;code&gt;tmux&lt;/code&gt;会话：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux attach -t session_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;切换到名为&lt;code&gt;session_name&lt;/code&gt;的现有会话：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux switch -t session_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;列出现有&lt;code&gt;tmux&lt;/code&gt;会话：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux list-sessions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;分离当前连接的会话：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux detach&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;快捷键是：&lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; ，然后键入&lt;kbd&gt;d&lt;/kbd&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://www.sysctl.me/categories/Tools/"/>
    
    
      <category term="Terminal" scheme="https://www.sysctl.me/tags/Terminal/"/>
    
      <category term="Effectiveness" scheme="https://www.sysctl.me/tags/Effectiveness/"/>
    
  </entry>
  
  <entry>
    <title>非果粉的MacBook Pro 16开箱</title>
    <link href="https://www.sysctl.me/2020/01/23/macbook-pro-16-out-of-the-box/"/>
    <id>https://www.sysctl.me/2020/01/23/macbook-pro-16-out-of-the-box/</id>
    <published>2020-01-23T13:44:03.000Z</published>
    <updated>2020-01-24T06:55:13.675Z</updated>
    
    <content type="html"><![CDATA[<font color=red size=6> FBI WARNING </font><blockquote><p> 本文不含性能测试等，实在懒得整理文字排版，不太会写开箱，会慢慢学习！！！</p></blockquote><p>  由于几乎没有任何移动办公的需求，这是我第二次买笔记本，第一个还是我上学的时候花2000买的二手HP电磁炉。</p><h1 id="为什么买它"><a href="#为什么买它" class="headerlink" title="为什么买它"></a>为什么买它</h1><p>之前办公一直是用一台<em>ThinkPad X260</em>，单位没有台式机，也没接显示器，一直装着Ubuntu，直到手贱Upgrade了一个非LTS版本（18.10），彻底GG以后，才意识到需要一台笔记本了。<img src="https://blog-image.nos-eastchina1.126.net/GoldenCuratorPanda00011.gif" style="zoom:25%;" /></p><p>本来是很排斥苹果的产品的（主要是看不惯果粉无脑吹，比如2019下半年美帝良心想的LEGION Y9000X，果粉根本不敢承认别家比他们水果强。逃，</p><p>想买败家之眼的GX 701，可是待机时间感人，</p><p>后来认怂想买个MAC Mini或者NUC8 i5，但也不能拿着去会议室看方案吧。</p><p>最后听了大佬一句劝，说买个最起码能用四年，直接下单了，<img src="https://blog-image.nos-eastchina1.126.net/wmyq.gif" style="zoom:25%;" /></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pz1.png" alt=""><br><a id="more"></a></p><h1 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h1><p>先仍一脸图：</p><p>不会拍照，见笑了<img src="https://blog-image.nos-eastchina1.126.net/zbzy.jpg" style="zoom:25%;" /></p><h2 id="纸箱"><a href="#纸箱" class="headerlink" title="纸箱"></a>纸箱</h2><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-wbz1.JPG" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-wbz2.JPG" alt=""></p><p>拍到这的时候我就劝退了，我打开ZF，膜拜了<em>Jones</em>大佬下开箱贴，发现没有工作台可以开箱，大佬们对付看吧（其实还缺相机、技术、开箱刀、灯等等。）</p><p><strong>继续丢图</strong></p><h2 id="开始撕膜"><a href="#开始撕膜" class="headerlink" title="开始撕膜"></a>开始撕膜</h2><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-wbz3.JPG" alt=""></p><p>这边光好暗，我换个位置。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-wbz4.JPG" alt=""></p><p>翻个面，撕开外包装透明薄膜：</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-kx1.JPG" alt=""></p><p>MacBook Pro这颜值我真是欣赏不来，还是MateBook X Pro好看。</p><h2 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h2><p>取出本尊，看看还有啥东西。<img src="https://blog-image.nos-eastchina1.126.net/ping999.jpg" style="zoom:50%;" /></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pj1.JPG" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pj2.JPG" alt=""></p><p>哪位大佬教我拍<strong>毒</strong>！ <strong>德</strong>味！。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pj3.JPG" alt=""></p><p>配件如下</p><div class="table-container"><table><thead><tr><th>配件描述</th><th>数量</th></tr></thead><tbody><tr><td>96W 电源适配器</td><td>1</td></tr><tr><td>USB-C充电线</td><td>1</td></tr><tr><td>Logo贴纸</td><td>2</td></tr><tr><td>说明书啥的</td><td>1包</td></tr></tbody></table></div><p>没啥小心意（没买过苹果）。<img src="https://blog-image.nos-eastchina1.126.net/glgj.gif" style="zoom:50%;" /></p><p>放一起拍个照吧。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-hz1.JPG" alt=""></p><h2 id="MacBook"><a href="#MacBook" class="headerlink" title="MacBook"></a>MacBook</h2><p>这东西这么沉，这么贵，咱们打开看看。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pm1.JPG" alt=""></p><p>这个膜还行，拿掉看看边框</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pm2.JPG" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-pm3.JPG" alt=""></p><p>这个电脑给我的直观感受就是又大，又长… 对又沉。</p><p>给键盘一个特写吧。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-jp1.JPG" alt=""></p><h1 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h1><p>整半天才开开机，可还行。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-kj1.JPG" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-kj2.JPG" alt=""></p><p>一路下一步，吐槽一下，电脑密码不能跟<code>Apple ID</code>的密码一样。</p><hr><p>配置了几天，<code>touch bar</code>用处不大。</p><h2 id="Touch-Bar"><a href="#Touch-Bar" class="headerlink" title="Touch Bar"></a>Touch Bar</h2><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-touch1.jpg" alt=""></p><p>这个东西适配也不是特别好，只能去社区找一些随便玩玩，毕竟不是必需品，玩玩还行。</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-touch2.jpg" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-touch3.jpg" alt=""></p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-touch4.jpg" alt=""></p><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><p>系统学习成本有点高，还需要找时间慢慢了解，</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-xt1.png" alt=""></p><p>桌面也没换呢：</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-zm.png" alt=""></p><p>iTerm先能用再说：</p><p><img src="https://blog-image.nos-eastchina1.126.net/macbook-jk.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>音响很好，笔记本中算是第一梯队了，六扬声器音响可真不错。</li><li>边框相对之前的版本要好很多了。</li><li>回归剪刀脚键盘手感是好了些。</li><li>指纹很灵敏</li><li>实体<kbd>ESC</kbd>解决了前几款<code>Touch Bar</code>的尴尬。</li><li>触摸板从精准度和手势来说，都很强，但有学习成本。</li><li>屏幕色彩</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>系统没有什么特别，之前说它比windows好还行，与现阶段的Win10相比，只能说各有输赢，所以求你们别吹MacOS了。</li><li>续航一般</li><li>温度感人（Chrome瞬间爆炸）</li><li>贵</li><li>不支持WiFi6</li></ol><p><del>真正的粉丝，对品牌和产品都很了解，对一个产品的优点缺点都有很明确的认识，知道它适用的范围，不会胡乱传播品牌信仰。</del></p><p><del>真粉是从用户角度出发的，所以真粉一般只说缺点，很少说优点，真粉已经为优点掏了自己的真金白银，因此产品有优点是理所当然的，还用吹吗？</del></p><p><img src="https://blog-image.nos-eastchina1.126.net/pkq.gif"  style="zoom:50%;" /></p><p><del>假的粉丝，完全凭感觉讲述产品，认为感觉好的产品就是完美的，不接受“产品有缺点”的说法。</del></p><p><del>所以，真粉的特点总结两句话：产品有优点买买买，产品有缺点骂骂骂。</del></p><p>我加了删除线，最后寄出老罗保我平安。</p><p><img src="https://blog-image.nos-eastchina1.126.net/sgpg.gif"  style="zoom:50%;" /></p>]]></content>
    
    <summary type="html">
    
      &lt;font color=red size=6&gt; FBI WARNING &lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt; 本文不含性能测试等，实在懒得整理文字排版，不太会写开箱，会慢慢学习！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  由于几乎没有任何移动办公的需求，这是我第二次买笔记本，第一个还是我上学的时候花2000买的二手HP电磁炉。&lt;/p&gt;
&lt;h1 id=&quot;为什么买它&quot;&gt;&lt;a href=&quot;#为什么买它&quot; class=&quot;headerlink&quot; title=&quot;为什么买它&quot;&gt;&lt;/a&gt;为什么买它&lt;/h1&gt;&lt;p&gt;之前办公一直是用一台&lt;em&gt;ThinkPad X260&lt;/em&gt;，单位没有台式机，也没接显示器，一直装着Ubuntu，直到手贱Upgrade了一个非LTS版本（18.10），彻底GG以后，才意识到需要一台笔记本了。&lt;img src=&quot;https://blog-image.nos-eastchina1.126.net/GoldenCuratorPanda00011.gif&quot; style=&quot;zoom:25%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;本来是很排斥苹果的产品的（主要是看不惯果粉无脑吹，比如2019下半年美帝良心想的LEGION Y9000X，果粉根本不敢承认别家比他们水果强。逃，&lt;/p&gt;
&lt;p&gt;想买败家之眼的GX 701，可是待机时间感人，&lt;/p&gt;
&lt;p&gt;后来认怂想买个MAC Mini或者NUC8 i5，但也不能拿着去会议室看方案吧。&lt;/p&gt;
&lt;p&gt;最后听了大佬一句劝，说买个最起码能用四年，直接下单了，&lt;img src=&quot;https://blog-image.nos-eastchina1.126.net/wmyq.gif&quot; style=&quot;zoom:25%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-image.nos-eastchina1.126.net/macbook-pz1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Toys" scheme="https://www.sysctl.me/categories/Toys/"/>
    
    
      <category term="apple" scheme="https://www.sysctl.me/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title>使用IaC实现简单的网络自动化</title>
    <link href="https://www.sysctl.me/2019/12/28/Networking/NetOps/Network-automation-using-IaC/"/>
    <id>https://www.sysctl.me/2019/12/28/Networking/NetOps/Network-automation-using-IaC/</id>
    <published>2019-12-28T15:20:00.000Z</published>
    <updated>2020-01-22T14:30:20.980Z</updated>
    
    <content type="html"><![CDATA[<p>基础架构即代码意味着编写代码来配置，管理和部署IT基础架构，这种概念以下几项关键原则：</p><ul><li>可再生性：基础环境中的任意元素可以再现，复制。</li><li>一致性：无论何时，创建在环境各个元素的配置是完全相同的。</li><li>快速反馈：能够频繁、简单地进行变更。</li><li>可见性：所有对环境的变更都更易读、可接受版本控制的管理。</li></ul><p>通过IaC，可以将基础设施中的元素和配置标准化、自动化，将基础设施作为软件开发流程中的一个功能，一段代码，实现基础设施的pipeline，从而最终实现CI/CD，NetOps以及DevOps。</p><p>本文主要描述配置的声明以及下发示例，通过<code>Ansible</code>和<code>Terraform</code>两种IaC工具，通过<code>Netconf over SSH</code>协议对正在运行<code>JunOS</code>的网络设备进行配置的下发，后期会慢慢记录Pipeline的实现（还没弄）。<br><a id="more"></a></p><h1 id="用到的协议和工具"><a href="#用到的协议和工具" class="headerlink" title="用到的协议和工具"></a>用到的协议和工具</h1><ul><li><p>Netconf</p><p>NETCONF是IETF定义的“安装，操作和删除网络设备的配置”的协议。NETCONF操作是使用XML编码在远程过程调用（RPC）层之上实现的，并且提供了一组基本操作来编辑和查询网络设备上的配置。</p><p>在NETCONF之前，CLI脚本是对网络进行自动配置更改的主要方法。CLI脚本具有一些局限性，包括缺乏事务管理，没有结构化的错误管理以及不断变化的命令结构和语法，这使得脚本脆弱且维护成本很高。这些都是因为CLI旨在供人类使用而不是用于程序访问的API的基本事实的所有副作用。</p><p>NETCONF协议旨在解决配置管理的现有实践和协议的缺点。在2002 IAB网络管理研讨会的<a href="http://tools.ietf.org/html/rfc3535" target="_blank" rel="noopener">RFC 3535</a>概述中记录了设计阶段之前的背景工作。该工作的设计目标包括：</p><ul><li>配置和状态数据之间的区别</li><li>多个配置数据存储（候选，运行，启动）</li><li>配置变更交易</li><li>配置测试和验证支持</li><li>通过过滤进行选择性数据检索</li><li>流和事件通知的播放</li><li>可扩展过程调用机制</li></ul></li><li><p>Ansible</p><p>Ansible是一个简单的开源软件自动化平台，负责应用程序部署，配置管理，临时任务执行和多节点编排。Ansible本身是用Python编写的，学习曲线相当小。Ansible遵循简单的设置过程，并且不依赖于任何其他软件，服务器或客户端守护程序。它通过SSH管理节点，并且默认情况下是并行的。</p></li><li><p>Terraform</p><p>是一个IT基础架构自动化编排工具，可以用代码来管理维护IT资源（暂时没有支持JunOS的provider，希望官方或大佬完善，目前只在Github找到一个简单的实现，这里用作示范）。</p></li><li><p>PyEZ</p><p>Junos PyEZ是Python的微框架，使您可以管理和自动化运行Junos操作系统（Junos OS）的设备。 Junos PyEZ旨在在为自动化任务构建的环境中提供用户在Junos OS命令行界面（CLI）上所具有的功能。 </p></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><img src="https://blog-image.nos-eastchina1.126.net/g200220.png" alt=""></p><p><em>图片摘自Juniper.net</em></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>虽然<code>Terraform</code>可以跨平台，但是<code>Ansible</code>并不支持<code>Windows</code>，所以我们要准备一台Linux（有Macbook就不用啦，逃。</p><p>所以我们需要准备以下资源：</p><ol><li>一台非Windows系统的Controller</li><li>一个运行着JunOS的机器（我这边下载一个vSRX）</li><li>一个可以互相通信的网络</li></ol><p>对应的IP地址：</p><div class="table-container"><table><thead><tr><th>组件</th><th>OS</th><th>IP</th></tr></thead><tbody><tr><td>Ansible&amp;&amp;Terraform控制节点</td><td>CentOS7</td><td>192.168.1.139</td></tr><tr><td>Juniper vSRX</td><td>FreeBSD</td><td>192.168.1.105</td></tr></tbody></table></div><h2 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h2><h3 id="对于控制节点"><a href="#对于控制节点" class="headerlink" title="对于控制节点"></a>对于控制节点</h3><p>所有的请求需要基于SSH协议，虽然Ansible支持在配置文件中声明主机密码变量以及交互式输入密码，但由于JunOS运行在BSD系统上，为了减少奇怪的问题，所以配置SSH免密登陆（生产环境也建议这样）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成SSH认证密钥对</span></span><br><span class="line">ssh-keygen </span><br><span class="line"><span class="comment"># 安装软件Ansible所需的软件,pip版本取决于Ansible使用哪个版本的Python解释器，CentOS7默认是python2</span></span><br><span class="line">yum -y install python ansible python2-pip python3-pip </span><br><span class="line"><span class="comment"># 安装 pip模块</span></span><br><span class="line">pip install ncclient netconf junos-eznc jxmlease</span><br><span class="line"><span class="comment"># 安装 Juniper.junos 的ansible-galaxy Role</span></span><br><span class="line">ansible-galaxy install git+https://github.com/Juniper/ansible-junos-stdlib.git,,Juniper.junos</span><br><span class="line"><span class="comment"># terraform 安装略，二进制文件，直接放在$PATH里面就可以。</span></span><br></pre></td></tr></table></figure><h3 id="对于vSRX"><a href="#对于vSRX" class="headerlink" title="对于vSRX"></a>对于vSRX</h3><blockquote><p>控制节点已事先SSH密钥对。</p></blockquote><p>所有的请求需要基于SSH协议，所以需要先开启SSH，以及Netconf，以及一个专用于Netconf的用户，这里临时使用root用作演示，生产环境请不要使用root，应单独声明用户Netconf的用户，且不支持密码登陆，仅允许SSH密钥登陆。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启SSH</span></span><br><span class="line"><span class="comment"># cli模式下执行</span></span><br><span class="line">configure <span class="comment"># 软件配置模式</span></span><br><span class="line"><span class="built_in">set</span> system services ssh</span><br><span class="line"><span class="built_in">set</span> system services netconf ssh </span><br><span class="line"><span class="built_in">set</span> system services ssh root-login allow <span class="comment"># 生产请勿使用root</span></span><br><span class="line">commit <span class="comment"># 提交</span></span><br><span class="line">start shell <span class="comment"># 进入shell模式</span></span><br><span class="line"><span class="comment"># shell模式下执行</span></span><br><span class="line">scp 192.168.1.139:/root/.ssh/id_rsa.pub /tmp/ <span class="comment"># copy公钥到本地</span></span><br><span class="line">cli <span class="comment"># 进入cli模式</span></span><br><span class="line"><span class="comment"># cli模式下执行</span></span><br><span class="line">configure <span class="comment"># 软件配置模式</span></span><br><span class="line"><span class="built_in">set</span> system root-authentication load-key-file /tmp/id_rsa.pub <span class="comment"># 免密登陆</span></span><br><span class="line"><span class="comment"># 非root用户请执行：set system login user ...</span></span><br><span class="line">commit <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure><p><em>现在使用控制节点测试root登陆是否已经不需要输入密码</em></p><h1 id="Ansible配置"><a href="#Ansible配置" class="headerlink" title="Ansible配置"></a>Ansible配置</h1><p>ansible主要有两个配置文件：</p><ol><li><code>ansible.cfg</code> ,Ansible的配置文件，定义Ansible的行为。未指定的情况下，默认使用<code>/etc/ansible/ansible.cfg</code></li><li>hosts，Ansible的清单文件，用来描述受管节点信息。未指定的情况下，默认使用<code>/etc/ansible/hosts</code></li></ol><p>首先我们先修改<code>/etc/ansible/ansible.cfg</code> 指定刚才生成的SSH密钥：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if set, always use this private key file for authentication, same as</span></span><br><span class="line"><span class="comment"># if passing --private-key to ansible or ansible-playbook</span></span><br><span class="line"><span class="attr">private_key_file</span> = /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>然后将vSRX声明到<code>/etc/ansible/hosts</code>这个默认的清单文件中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[junos]</span></span><br><span class="line">192.168.1.105</span><br><span class="line"><span class="section">[junos:vars]</span></span><br><span class="line"><span class="attr">ansible_connection</span>=netconf</span><br><span class="line"><span class="attr">ansible_network_os</span>=junos</span><br><span class="line"><span class="attr">ansible_user</span>=root</span><br><span class="line"><span class="attr">ansible_ssh_common_args</span>=<span class="string">'-o ProxyCommand="ssh -W %h:%p -q bastion01"'</span></span><br></pre></td></tr></table></figure><p>这里我定义了一个名为junos的<code>group</code>，包含一台主机，主机的IP地址是<code>192.168.1.105</code>，同时定义了仅对junos这个<code>group</code>生效的变量。</p><h2 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h2><p>Ansible的Playbook是<code>yaml</code>格式的声明式文本文件，可以定义多项操作，下面几个示例可以体验一下。</p><h3 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h3><p>首先玩个玩具，也是最简单的，登陆设备的横幅：</p><p>写一个，<code>Welcome To HIT-IDC</code>，这时候需要一个神器，<a href="http://www.network-science.de/ascii" target="_blank" rel="noopener">ascii Generator</a>。输入想要变成ASCII的文字，然后粘贴到文本中，命名为<code>/opt/junos-ansible/banner.cfg</code>。</p><p>然后写一个简单<code>playbook</code>，命名为<code>banner.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span> <span class="string">from</span> <span class="string">Junos</span> <span class="string">devices</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">banner</span> <span class="string">from</span> <span class="string">file</span></span><br><span class="line">    <span class="attr">junos_banner:</span></span><br><span class="line">      <span class="attr">banner:</span>  <span class="string">motd</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">"<span class="template-variable">&#123;&#123; lookup('file', '/opt/junos-ansible/banner.cfg') &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><p>我们执行这个剧本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook banner.yaml</span><br></pre></td></tr></table></figure><p>现在登陆设备，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Last login: Fri Dec 13 17:30:53 2019 from 192.168.1.171</span><br><span class="line">--- JUNOS 19.3R2.9 Kernel 64-bit  JNPR-11.0-20191120.0ebd4bf_buil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">||   / |  / /</span><br><span class="line">||  /  | / /  ___     //  ___      ___      _   __      ___</span><br><span class="line">|| / /||/ / //___) ) // //   ) ) //   ) ) // ) )  ) ) //___) )</span><br><span class="line">||/ / |  / //       // //       //   / / // / /  / / //</span><br><span class="line">|  /  | / ((____   // ((____   ((___/ / // / /  / / ((____</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /__  ___/</span><br><span class="line">   / /   ___</span><br><span class="line">  / /  //   ) )</span><br><span class="line"> / /  //   / /</span><br><span class="line">/ /  ((___/ /</span><br><span class="line"></span><br><span class="line">             ___   ___               ___   ___</span><br><span class="line">    //    / /   / / /__  ___/           / /    //    ) ) //   ) )</span><br><span class="line">   //___ / /   / /    / /              / /    //    / / //</span><br><span class="line">  / ___   /   / /    / /      ____    / /    //    / / //</span><br><span class="line"> //    / /   / /    / /              / /    //    / / //</span><br><span class="line">//    / / __/ /___ / /            __/ /___ //____/ / ((____/ /test_user1@juniper-vsrx-01&gt;</span><br><span class="line"></span><br><span class="line">test_user1@juniper-vsrx-01&gt;</span><br></pre></td></tr></table></figure><h4 id="升级JunOS"><a href="#升级JunOS" class="headerlink" title="升级JunOS"></a>升级JunOS</h4><p>首先下载对应的包放在本地，当然也可以放在设备的文件系统上，这个看需求，示例中放在本地：</p><p>将文件放在<code>/opt/junos-ansible/junos-vsrx-x86-64-19.3R2.9.tgz</code>。</p><p>然后再次编写一个playbook，名为<code>install-os.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Junos</span> <span class="string">OS</span> <span class="comment"># 剧本名称</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span>  <span class="comment"># 配置的组</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span>  <span class="comment"># 调用的roles</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span> <span class="comment"># 连接方式</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span>     <span class="comment"># 变量，不解释了</span></span><br><span class="line">    <span class="attr">OS_version:</span> <span class="string">"19.3R2.9"</span></span><br><span class="line">    <span class="attr">OS_package:</span> <span class="string">"junos-vsrx-x86-64-19.3R2.9.tgz"</span></span><br><span class="line">    <span class="attr">pkg_dir:</span> <span class="string">"/opt/junos-ansible"</span></span><br><span class="line">    <span class="attr">log_dir:</span> <span class="string">"/var/log/ansible"</span></span><br><span class="line">    <span class="attr">netconf_port:</span> <span class="number">830</span></span><br><span class="line">    <span class="attr">wait_time:</span> <span class="number">3600</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span>  <span class="comment"># 定义多个任务</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checking</span> <span class="string">NETCONF</span> <span class="string">connectivity</span> <span class="comment"># 任务名称</span></span><br><span class="line">      <span class="attr">wait_for:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">"<span class="template-variable">&#123;&#123; inventory_hostname &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">"<span class="template-variable">&#123;&#123; netconf_port &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Junos</span> <span class="string">OS</span> <span class="string">package</span>  <span class="comment"># 任务名称</span></span><br><span class="line">      <span class="attr">juniper_junos_software:</span> <span class="comment"># 调用的modules</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">"<span class="template-variable">&#123;&#123; OS_version &#125;&#125;</span>"</span> <span class="comment"># 传入vars中定义的变量值</span></span><br><span class="line">        <span class="attr">local_package:</span> <span class="string">"<span class="template-variable">&#123;&#123; pkg_dir &#125;&#125;</span>/<span class="template-variable">&#123;&#123; OS_package &#125;&#125;</span>"</span> <span class="comment"># 包的路径</span></span><br><span class="line">        <span class="attr">reboot:</span> <span class="literal">true</span> <span class="comment"># 是否重启</span></span><br><span class="line">        <span class="attr">validate:</span> <span class="literal">true</span> <span class="comment"># 是否验证</span></span><br><span class="line">        <span class="attr">cleanfs:</span> <span class="literal">true</span> <span class="comment"># 是否清理文件系统</span></span><br><span class="line">        <span class="attr">logfile:</span> <span class="string">"<span class="template-variable">&#123;&#123; log_dir &#125;&#125;</span>/software.log"</span> <span class="comment"># 日志位置</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">sw</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wait_reboot</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">response</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">response</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wait_reboot</span></span><br><span class="line">      <span class="attr">wait_for:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">"<span class="template-variable">&#123;&#123; inventory_hostname &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">"<span class="template-variable">&#123;&#123; netconf_port &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">"<span class="template-variable">&#123;&#123; wait_time &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">not</span> <span class="string">sw.check_mode</span></span><br></pre></td></tr></table></figure><p> 我在playbook中描述了大概的注释，运行的时候，请先把注释删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook install-os.yaml</span><br></pre></td></tr></table></figure><blockquote><p>不知道vSRX什么情况，不能升级，但是我在硬件设备都成功了。</p></blockquote><p>现在可以看到，JunOS已经倒计时重启，开机后可以执行<code>show version</code></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>这里我们将演示如何创建用户：</p><p>编写名为<code>user.yaml</code>的<code>playbook</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">User</span> <span class="string">On</span> <span class="string">Junos</span> <span class="string">OS</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">list</span> <span class="string">of</span> <span class="string">users</span></span><br><span class="line">      <span class="attr">junos_user:</span></span><br><span class="line">        <span class="attr">aggregate:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#123;name:</span> <span class="string">test_user1,</span> <span class="attr">full_name:</span> <span class="string">test_user2,</span> <span class="attr">role:</span> <span class="string">operator,</span> <span class="attr">state:</span> <span class="string">present&#125;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#123;name:</span> <span class="string">test_user2,</span> <span class="attr">full_name:</span> <span class="string">test_user2,</span> <span class="attr">role:</span> <span class="string">read-only,</span> <span class="attr">state:</span> <span class="string">present&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">user1</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">junos_user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test_user1</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">super-user</span></span><br><span class="line">        <span class="attr">encrypted_password:</span> <span class="string">"<span class="template-variable">&#123;&#123; 'my-passwordsdf' | password_hash('sha512') &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">user2</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">junos_user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test_user2</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">super-user</span></span><br><span class="line">        <span class="attr">encrypted_password:</span> <span class="string">"<span class="template-variable">&#123;&#123; 'my-password43' | password_hash('sha512') &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><p>然后执行这个<code>playbook</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook user.yaml</span><br></pre></td></tr></table></figure><p>这将在名为<code>junos</code>的<code>group</code>中创建这些用户，并设置角色和密码。</p><p><code>playbook</code>运行完成后，可以登陆设备测试。</p><h3 id="配置变更"><a href="#配置变更" class="headerlink" title="配置变更"></a>配置变更</h3><p>这里再次编写<code>playbook</code>，命名为<code>get-config.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get Junos OS configuration."</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get committed configuration"</span></span><br><span class="line">      <span class="attr">juniper_junos_config:</span></span><br><span class="line">        <span class="attr">retrieve:</span> <span class="string">"committed"</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">response</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Print result"</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">response</span></span><br></pre></td></tr></table></figure><p>这将获取设备的配置的信息，也可以将其保存为其他格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get Junos OS configuration."</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span> </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get configuration in XML format"</span></span><br><span class="line">      <span class="attr">juniper_junos_config:</span></span><br><span class="line">        <span class="attr">retrieve:</span> <span class="string">"committed"</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">"xml"</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">response</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Print result"</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">response</span></span><br></pre></td></tr></table></figure><p>也可以保存到文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get Junos OS configuration."</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span> </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get selected configuration hierarchies and save to file"</span></span><br><span class="line">      <span class="attr">juniper_junos_config:</span></span><br><span class="line">        <span class="attr">retrieve:</span> <span class="string">"committed"</span></span><br><span class="line">        <span class="attr">filter:</span> <span class="string">"system/services"</span></span><br><span class="line">        <span class="attr">dest_dir:</span> <span class="string">"<span class="template-variable">&#123;&#123; playbook_dir &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>这将保存过滤后的配置信息到本地，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">system &#123;</span><br><span class="line">    services &#123;</span><br><span class="line">        ssh &#123;</span><br><span class="line">            root-login allow;</span><br><span class="line">            sftp-server;</span><br><span class="line">            hostkey-algorithm &#123;</span><br><span class="line">                ssh-rsa;</span><br><span class="line">                no-ssh-ecdsa;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        netconf &#123;</span><br><span class="line">            ssh;</span><br><span class="line">        &#125;</span><br><span class="line">        web-management &#123;</span><br><span class="line">            http;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以对交换机执行<code>set</code>以及<code>delete</code>类的配置</p><p>编写示例文件<code>config-irb.10.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Get Junos OS configuration."</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">junos</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Juniper.junos</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">netconf</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">load</span> <span class="string">configure</span> <span class="string">lines</span> <span class="string">into</span> <span class="string">device</span></span><br><span class="line">    <span class="attr">junos_config:</span></span><br><span class="line">      <span class="attr">lines:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">set</span> <span class="string">interfaces</span> <span class="string">ge-0/0/1</span> <span class="string">unit</span> <span class="number">0</span> <span class="string">description</span> <span class="string">"Test interface"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">set</span> <span class="string">vlans</span> <span class="string">vlan01</span> <span class="string">description</span> <span class="string">"Test vlan"</span></span><br><span class="line">      <span class="attr">comment:</span> <span class="string">update</span> <span class="string">config</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">routed</span> <span class="string">VLAN</span> <span class="string">interface</span> <span class="string">(RVI)</span> <span class="string">IPv4</span> <span class="string">address</span></span><br><span class="line">    <span class="attr">junos_config:</span></span><br><span class="line">      <span class="attr">lines:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">set</span> <span class="string">vlans</span> <span class="string">vlan01</span> <span class="string">vlan-id</span> <span class="number">1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">set</span> <span class="string">interfaces</span> <span class="string">irb</span> <span class="string">unit</span> <span class="number">10</span> <span class="string">family</span> <span class="string">inet</span> <span class="string">address</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">/24</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">set</span> <span class="string">vlans</span> <span class="string">vlan01</span> <span class="string">l3-interface</span> <span class="string">irb.10</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">correctness</span> <span class="string">of</span> <span class="string">commit</span> <span class="string">configuration</span></span><br><span class="line">    <span class="attr">junos_config:</span></span><br><span class="line">      <span class="attr">check_commit:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>然后让我们登陆到JunOS上查看配置是否已经生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show |compare rollback 1</span><br></pre></td></tr></table></figure><p>回显如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[edit interfaces]</span><br><span class="line">+   irb &#123;</span><br><span class="line">+       unit 10 &#123;</span><br><span class="line">+           family inet &#123;</span><br><span class="line">+               address 10.0.0.1/24;</span><br><span class="line">+           &#125;</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line">[edit vlans vlan01]</span><br><span class="line">+   vlan-id 1;</span><br><span class="line">+   l3-interface irb.10;</span><br></pre></td></tr></table></figure><p>不多介绍功能了，这些功能主要是名为<code>Juniper.junos</code>的Ansible-Galaxy Role，以及Ansible的<code>junos</code>模块，这些依赖于<code>netconf</code>以及<code>JunOS PyEz</code>，以下是对应的文档地址：</p><p><a href="https://docs.ansible.com/ansible/latest/modules/list_of_network_modules.html#junos" target="_blank" rel="noopener">Ansible Junos</a></p><p><a href="https://github.com/Juniper/ansible-junos-stdlib" target="_blank" rel="noopener">Ansible-Galaxy Juniper.junos</a></p><p><a href="https://junos-ansible-modules.readthedocs.io/en/2.3.0/index.html" target="_blank" rel="noopener">Docs for Juniper.junos</a></p><p>具体参数可以查看这几份文档。</p><h2 id="Terraform-丝滑体验"><a href="#Terraform-丝滑体验" class="headerlink" title="Terraform 丝滑体验"></a>Terraform 丝滑体验</h2><p><code>Ansible</code>虽然算是比较简单的了，但是对于<code>Jinja2</code>模板变量的编写还是相对难上手的，但<code>Terraform</code>的变量声明可以算是一股清流。</p><p>逛论坛和Google半个月也没找到有关Juniper的<code>Terraform Provider</code>，社区插件都没有，Github上倒是找到了一个，不过不太完美，不敢用在生产，这里只做演示，希望以后官方或社区可以贡献一份生产可用的<code>Terraform Provider</code>。</p><h2 id="安装Terraform"><a href="#安装Terraform" class="headerlink" title="安装Terraform"></a>安装Terraform</h2><ul><li><p>下载<a href="https://releases.hashicorp.com/terraform/0.12.18/terraform_0.12.18_linux_amd64.zip" target="_blank" rel="noopener">二进制文件</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://releases.hashicorp.com/terraform/0.12.18/terraform_0.12.18_linux_amd64.zip</span><br></pre></td></tr></table></figure></li><li><p>解压到<code>/usr/sbin/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip terraform_0.12.18_linux_amd64.zip -d /usr/sbin/</span><br></pre></td></tr></table></figure></li><li><p>测试执行<code>terraform --version</code></p></li></ul><h2 id="安装Junos-Priovider（不建议生产，非官方，非社区插件）"><a href="#安装Junos-Priovider（不建议生产，非官方，非社区插件）" class="headerlink" title="安装Junos Priovider（不建议生产，非官方，非社区插件）"></a>安装Junos Priovider（不建议生产，非官方，非社区插件）</h2><ul><li><p>下载<a href="https://github.com/jeremmfr/terraform-provider-junos/releases" target="_blank" rel="noopener">二进制文件</a></p></li><li><p>解压到<code>/usr/sbin/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tfPath=$(<span class="built_in">which</span> terraform | rev | cut -d<span class="string">'/'</span> -f2- | rev)</span><br><span class="line">tar -zxvf terraform-provider-junos*.tar.gz -C <span class="variable">$&#123;tfPath&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-Terraform的JunOS-Provider"><a href="#配置-Terraform的JunOS-Provider" class="headerlink" title="配置 Terraform的JunOS Provider"></a>配置 Terraform的JunOS Provider</h2><p>与<code>Ansible</code>相同，需要在运行<code>JunOS</code>的设备上开启<code>ssh</code>以及<code>netconf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> system services netconf</span><br><span class="line"><span class="built_in">set</span> system login user netconf uid 200?</span><br><span class="line"><span class="built_in">set</span> system login user netconf class xxx</span><br><span class="line"><span class="built_in">set</span> system login user netconf authentication load-key-file /tmp/id_rsa.pub</span><br></pre></td></tr></table></figure><p>Terraform会读取当前目录下的所有以<code>.tf</code>结尾的文件。</p><p>首先先创建一个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /opt/terraform-junos-example</span><br><span class="line"><span class="built_in">cd</span> /opt/terraform-junos-example</span><br><span class="line">touch junos-example.tf</span><br></pre></td></tr></table></figure><p>现在开始声明 junos-example.tf文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure the Junos Provider</span></span><br><span class="line"><span class="string">provider</span> <span class="string">"junos"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">ip</span>         <span class="string">=</span> <span class="string">"192.168.1.105"</span></span><br><span class="line">  <span class="string">username</span> <span class="string">=</span> <span class="string">"root"</span></span><br><span class="line">  <span class="string">sshkeyfile</span> <span class="string">=</span> <span class="string">"/root/.ssh/id_rsa"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a application</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_application</span> <span class="string">"mysql"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>             <span class="string">=</span> <span class="string">"mysql"</span></span><br><span class="line">  <span class="string">protocol</span>         <span class="string">=</span> <span class="string">"tcp"</span></span><br><span class="line">  <span class="string">destination_port</span> <span class="string">=</span> <span class="string">"3306"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a set of applications</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_application_set</span> <span class="string">"ssh_telnet"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>         <span class="string">=</span> <span class="string">"ssh_telnet"</span></span><br><span class="line">  <span class="string">applications</span> <span class="string">=</span> <span class="string">["junos-ssh",</span> <span class="string">"junos-telnet"</span><span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure interface of switch</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_interface</span> <span class="string">"interface_switch_demo"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>         <span class="string">=</span> <span class="string">"ge-0/0/0"</span></span><br><span class="line">  <span class="string">description</span>  <span class="string">=</span> <span class="string">"interfaceSwitchDemo"</span></span><br><span class="line">  <span class="string">trunk</span>        <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">vlan_members</span> <span class="string">=</span> <span class="string">["100",</span> <span class="string">"101"</span><span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a vlan</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_vlan</span> <span class="string">"blue"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>        <span class="string">=</span> <span class="string">"blue"</span></span><br><span class="line">  <span class="string">description</span> <span class="string">=</span> <span class="string">"blue-10"</span></span><br><span class="line">  <span class="string">vlan_id</span>     <span class="string">=</span> <span class="number">10</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure a L3 interface on Junos Router or firewall</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_interface</span> <span class="string">"interface_fw_demo"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>         <span class="string">=</span> <span class="string">"ge-0/0/0"</span></span><br><span class="line">  <span class="string">description</span>  <span class="string">=</span> <span class="string">"interfaceFwDemo"</span></span><br><span class="line">  <span class="string">vlan_tagging</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_interface</span> <span class="string">"interface_fw_demo_100"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>        <span class="string">=</span> <span class="string">"$&#123;junos_interface.interface_fw_demo.name&#125;.100"</span></span><br><span class="line">  <span class="string">description</span> <span class="string">=</span> <span class="string">"interfaceFwDemo100"</span></span><br><span class="line">  <span class="string">inet_address</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">address</span> <span class="string">=</span> <span class="string">"192.0.2.1/25"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a destination nat pool</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_nat_destination_pool</span> <span class="string">"demo_dnat_pool"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>    <span class="string">=</span> <span class="string">"ip_internal"</span></span><br><span class="line">  <span class="string">address</span> <span class="string">=</span> <span class="string">"192.0.2.2/32"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a destination nat</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_nat_destination</span> <span class="string">"demo_dnat"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span> <span class="string">=</span> <span class="string">"dnat_from_untrust"</span></span><br><span class="line">  <span class="string">from</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">type</span>  <span class="string">=</span> <span class="string">"zone"</span></span><br><span class="line">    <span class="string">value</span> <span class="string">=</span> <span class="string">["untrust"]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">rule</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">name</span>                <span class="string">=</span> <span class="string">"nat_192_0_2_129"</span></span><br><span class="line">    <span class="string">destination_address</span> <span class="string">=</span> <span class="string">"192.0.2.129/32"</span></span><br><span class="line">    <span class="string">then</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">type</span> <span class="string">=</span> <span class="string">"pool"</span></span><br><span class="line">      <span class="string">pool</span> <span class="string">=</span> <span class="string">"pool_trust"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a source nat pool</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_nat_source_pool</span> <span class="string">"demo_snat_pool"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>    <span class="string">=</span> <span class="string">"ip_external"</span></span><br><span class="line">  <span class="string">address</span> <span class="string">=</span> <span class="string">["192.0.2.129/32"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># Add a source nat</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_nat_source</span> <span class="string">"demo_snat"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span> <span class="string">=</span> <span class="string">"nat_from_trust_to_untrust"</span></span><br><span class="line">  <span class="string">from</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">type</span>  <span class="string">=</span> <span class="string">"zone"</span></span><br><span class="line">    <span class="string">value</span> <span class="string">=</span> <span class="string">["trust"]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">to</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">type</span>  <span class="string">=</span> <span class="string">"zone"</span></span><br><span class="line">    <span class="string">value</span> <span class="string">=</span> <span class="string">["untrust"]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">rule</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">name</span> <span class="string">=</span> <span class="string">"nat_192_0_2_0_25"</span></span><br><span class="line">    <span class="string">match</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">source_address</span> <span class="string">=</span> <span class="string">["192.0.2.0/25"]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">then</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">type</span> <span class="string">=</span> <span class="string">"pool"</span></span><br><span class="line">      <span class="string">pool</span> <span class="string">=</span> <span class="string">"pool_untrust"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a static nat</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_nat_static</span> <span class="string">"demo_nat"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span> <span class="string">=</span> <span class="string">"nat_from_trust"</span></span><br><span class="line">  <span class="string">from</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">type</span>  <span class="string">=</span> <span class="string">"zone"</span></span><br><span class="line">    <span class="string">value</span> <span class="string">=</span> <span class="string">["trust"]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">rule</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">name</span>                <span class="string">=</span> <span class="string">"nat_192_0_2_0_25"</span></span><br><span class="line">    <span class="string">destination_address</span> <span class="string">=</span> <span class="string">"192.0.2.0/25"</span></span><br><span class="line">    <span class="string">then</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">type</span>   <span class="string">=</span> <span class="string">"prefix"</span></span><br><span class="line">      <span class="string">prefix</span> <span class="string">=</span> <span class="string">"192.0.2.128/25"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a security policy</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_policy</span> <span class="string">"demo_policy"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">from_zone</span> <span class="string">=</span> <span class="string">"trust"</span></span><br><span class="line">  <span class="string">to_zone</span>   <span class="string">=</span> <span class="string">"untrust"</span></span><br><span class="line">  <span class="string">policy</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">name</span>                      <span class="string">=</span> <span class="string">"allow_trust"</span></span><br><span class="line">    <span class="string">match_source_address</span>      <span class="string">=</span> <span class="string">["any"]</span></span><br><span class="line">    <span class="string">match_destination_address</span> <span class="string">=</span> <span class="string">["any"]</span></span><br><span class="line">    <span class="string">match_application</span>         <span class="string">=</span> <span class="string">["any"]</span></span><br><span class="line">    <span class="string">then</span>                      <span class="string">=</span> <span class="string">"permit"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a security zone</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_security_zone</span> <span class="string">"demo_zone"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">name</span>              <span class="string">=</span> <span class="string">"DemoZone"</span></span><br><span class="line">  <span class="string">inbound_protocols</span> <span class="string">=</span> <span class="string">["bgp"]</span></span><br><span class="line">  <span class="string">address_book</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">name</span>    <span class="string">=</span> <span class="string">"DemoAddress"</span></span><br><span class="line">    <span class="string">network</span> <span class="string">=</span> <span class="string">"192.0.2.0/25"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a static route</span></span><br><span class="line"><span class="string">resource</span> <span class="string">junos_static_route</span> <span class="string">"demo_static_route"</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">destination</span>      <span class="string">=</span> <span class="string">"192.0.2.0/25"</span></span><br><span class="line">  <span class="string">routing_instance</span> <span class="string">=</span> <span class="string">"prod-vr"</span></span><br><span class="line">  <span class="string">next_hop</span>         <span class="string">=</span> <span class="string">["st0.0"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>首先初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><p>然后构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><blockquote><p>这个插件逻辑不太通，所以使用的时候需要浪费很多时间调试。</p></blockquote><h1 id="如何实现CI-CD"><a href="#如何实现CI-CD" class="headerlink" title="如何实现CI/CD"></a>如何实现CI/CD</h1><p>首先得现有一个CI工具，主流的就是<code>Jenkins</code>，这个还在犹豫，想尝试一下<code>Drone</code>或者<code>Tekton</code>，在Pipeline上调用插件，<code>Ansible</code>或是<code>Terraform</code>，使用git进行版本控制，最后实现业务从申请到上线，不需要人肉传递信息，只需要审批流程+n个动作，不需要或很少需要人工干预实现业务上线，就类似这样：</p><p><img src="https://blog-image.nos-eastchina1.126.net/8-ci-cd-using-hashicorp-terraform-and-jenkins.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基础架构即代码意味着编写代码来配置，管理和部署IT基础架构，这种概念以下几项关键原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可再生性：基础环境中的任意元素可以再现，复制。&lt;/li&gt;
&lt;li&gt;一致性：无论何时，创建在环境各个元素的配置是完全相同的。&lt;/li&gt;
&lt;li&gt;快速反馈：能够频繁、简单地进行变更。&lt;/li&gt;
&lt;li&gt;可见性：所有对环境的变更都更易读、可接受版本控制的管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过IaC，可以将基础设施中的元素和配置标准化、自动化，将基础设施作为软件开发流程中的一个功能，一段代码，实现基础设施的pipeline，从而最终实现CI/CD，NetOps以及DevOps。&lt;/p&gt;
&lt;p&gt;本文主要描述配置的声明以及下发示例，通过&lt;code&gt;Ansible&lt;/code&gt;和&lt;code&gt;Terraform&lt;/code&gt;两种IaC工具，通过&lt;code&gt;Netconf over SSH&lt;/code&gt;协议对正在运行&lt;code&gt;JunOS&lt;/code&gt;的网络设备进行配置的下发，后期会慢慢记录Pipeline的实现（还没弄）。&lt;br&gt;
    
    </summary>
    
    
      <category term="IaC" scheme="https://www.sysctl.me/categories/IaC/"/>
    
    
      <category term="Ansible" scheme="https://www.sysctl.me/tags/Ansible/"/>
    
      <category term="JunOS" scheme="https://www.sysctl.me/tags/JunOS/"/>
    
      <category term="Terraform" scheme="https://www.sysctl.me/tags/Terraform/"/>
    
      <category term="Netconf" scheme="https://www.sysctl.me/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>部署RHCS</title>
    <link href="https://www.sysctl.me/2019/07/22/Linux/HA/RHCS/"/>
    <id>https://www.sysctl.me/2019/07/22/Linux/HA/RHCS/</id>
    <published>2019-07-22T09:20:00.000Z</published>
    <updated>2020-01-22T14:33:21.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境信息"><a href="#基础环境信息" class="headerlink" title="基础环境信息"></a>基础环境信息</h1><p>描述本次基础环境信息：</p><p><img src="https://blog-image.nos-eastchina1.126.net/9159.png" alt=""></p><a id="more"></a><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><div class="table-container"><table><thead><tr><th>操作系统版本</th><th>操作系统镜像</th></tr></thead><tbody><tr><td><code>Red Hat Enterprise Linux Server release 6.8</code></td><td><code>rhel-server-6.8-x86_64-dvd.iso</code></td></tr></tbody></table></div><h2 id="主机信息"><a href="#主机信息" class="headerlink" title="主机信息"></a>主机信息</h2><div class="table-container"><table><thead><tr><th>主机名</th><th>主机IP地址</th><th>角色</th></tr></thead><tbody><tr><td><code>fence</code></td><td>x.x.x.x</td><td>仿真fence设备</td></tr><tr><td><code>RHCE-node1</code></td><td><code>192.168.220.221</code></td><td>RHCS集群节点-01</td></tr><tr><td><code>RHEL-node2</code></td><td><code>192.168.220.222</code></td><td>RHCS集群节点-02</td></tr></tbody></table></div><h2 id="RHCS中启用的IP端口"><a href="#RHCS中启用的IP端口" class="headerlink" title="RHCS中启用的IP端口"></a>RHCS中启用的IP端口</h2><div class="table-container"><table><thead><tr><th style="text-align:left">IP 端口号</th><th style="text-align:left">协议</th><th style="text-align:left">组件</th></tr></thead><tbody><tr><td style="text-align:left">5404, 5405</td><td style="text-align:left">UDP</td><td style="text-align:left"><code>corosync/cman</code>（集群管理器）</td></tr><tr><td style="text-align:left">11111</td><td style="text-align:left">TCP</td><td style="text-align:left"><code>ricci</code>（推广更新的集群信息）</td></tr><tr><td style="text-align:left">21064</td><td style="text-align:left">TCP</td><td style="text-align:left"><code>dlm</code>（发布的锁定管理器）</td></tr><tr><td style="text-align:left">16851</td><td style="text-align:left">TCP</td><td style="text-align:left"><code>modclusterd</code></td></tr></tbody></table></div><h2 id="存储信息"><a href="#存储信息" class="headerlink" title="存储信息"></a>存储信息</h2><div class="table-container"><table><thead><tr><th>存储类型</th><th>多路径软件</th></tr></thead><tbody><tr><td><code>iSCSI</code></td><td><code>device-mapper-multipath</code></td></tr></tbody></table></div><p><strong>iSCSI只需要配置<code>initiator</code>与<code>target</code>可以请求即可，实际环境若为FC-SAN，请将主机的wwpn提供给存储管理员。</strong></p><p><strong>查看wwpn的方法</strong>:<code>cat /sys/class/fc_host/host*/port_name</code></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>可使用各种方法配置红帽高可用性附加组件以满足您的需要。当进行计划、配置和实施的部署时，请考虑以下常规注意事项：</p><ul><li><p>支持的集群节点数</p><p>红帽高可用性附加组件最多支持的集群节点数为 16。</p></li><li><p>单点集群</p><p>现在只能完全支持单点集群。</p></li><li><p>GFS2</p><p>虽然 GFS2 文件系统既可作为独立系统使用，也可作为集群配置的一部分，但不支持将 GFS2 作为单节点文件系统使用。红帽支持很多为单节点优化的高性能单节点文件系统，它们相对集群文件系统来说支出更低。红帽将继续为现有客户支持单节点 GFS2 文件系统。当您将 GFS2 文件系统作为集群文件系统配置时，必须确定该集群中的所有节点都可访问共享的文件系统。不支持不对称集群配置，在不对称集群中，有些节点可访问该文件系统，而其他节点则不能。这不要求所有节点确实挂载该 GFS2 文件系统。</p></li><li><p>无单点故障硬件配置</p><p>集群可包括一个双控制器 RAID 阵列、多绑定链路、集群成员和存储间的多路径以及冗余无间断供电（UPS）系统以保证没有单点故障造成的应用程序失败或者数据丢失。另外，可设置一个低消耗集群以提供比无单点故障集群低的可用性。例如：您可以设置一个使用单控制器 RAID 阵列和只使用单以太网链路的集群。某些低消耗备选方案，比如主机 RAID 控制器、无集群支持的软件 RAID 以及多启动器平行 SCSI 配置与共享集群存储不兼容，或者不适合作为共享集群存储使用。</p></li><li><p>确保数据完整</p><p>要保证数据完整，则每次只能有一个节点可运行集群服务和访问集群服务数据。在集群硬件配置中使用电源开关，就可让一个节点在故障切换过程中，重启节点 HA 服务前为另一个节点提供动力。这样就可防止两个节点同时访问同一数据并破坏数据。强烈建议使用 <em>Fence 设备</em>（远程供电、关闭和重启集群节点的硬件或者软件解决方案），以确保在所有失败情况下数据的完整性。</p></li><li><p>以太网通道绑定</p><p>集群仲裁以及节点是否正常运行是由在通过以太网在集群节点间的沟通信息确定的。另外，集群节点使用以太网执行各种重要集群功能（例如：fencing）。使用以太网通道绑定，可将多个以太网接口配置为作为一个接口动作，这样就减小了在集群节点间以及其他集群硬件间典型切换的以太网连接单点故障风险。</p></li><li><p>IPv4 和 IPv6</p><p>高可用性附加组件支持 IPv4 和 IPv6 互联网协议。</p></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p><em>暂时关闭，如果需要细化防火墙规则，文档最后会列出详细的防火墙配置</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -F <span class="comment"># 清空iptables规则（如果默认策略是Drop，请不要执行此条命令。）</span></span><br><span class="line">iptables-save   <span class="comment"># 保存配置</span></span><br><span class="line">iptables -L -n    <span class="comment"># 查看当前规则</span></span><br></pre></td></tr></table></figure><h2 id="禁用或删除NetworkManager"><a href="#禁用或删除NetworkManager" class="headerlink" title="禁用或删除NetworkManager"></a>禁用或删除NetworkManager</h2><p><em>不支持在集群节点中使用 <code>NetworkManager</code>。如果您已经在集群节点中安装了 <code>NetworkManager</code>，您应该删除或者禁用该程序。</em></p><p>直接删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y NetworkManager  <span class="comment"># 移除包</span></span><br></pre></td></tr></table></figure><p>或者不删除,考虑禁用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop <span class="comment">#关闭服务</span></span><br><span class="line">chkconfig NetworkManager off <span class="comment"># 取消开机启动</span></span><br></pre></td></tr></table></figure><h2 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h2><p>如果熟悉的话可以配置，不熟悉的话，就直接关闭吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i s/SELINUX=enforcing/SELINUX=disabled/g  /etc/selinux/config     </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>彻底关闭SELinux需要重启，如果暂时不方便重启，可以先执行<code>setenforce 0</code>,等方便的时候重启服务器。</strong></p><h2 id="配置本地Yum源"><a href="#配置本地Yum源" class="headerlink" title="配置本地Yum源"></a>配置本地Yum源</h2><p>在<code>/etc/yum.repos.d</code>目录下创建新的本地<code>yumrepo</code>文件，本示例的<code>repo</code>文件名为<code>redhat-base.repo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sr0 /mnt</span><br><span class="line">vi  /etc/yum.repos.d/redhat-base.repo</span><br></pre></td></tr></table></figure><p>以下是文件内容，<em>(假设ISO文件挂载至<code>/mnt</code>下)</em>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=base</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[HighAvailability]</span><br><span class="line">name=HighAvailablity</span><br><span class="line">baseurl=file:///mnt/HighAvailability</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[ResilientStorage]</span><br><span class="line">name=ResilientStorage</span><br><span class="line">baseurl=file:///mnt/ResilientStorage</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[LoadBalancer]</span><br><span class="line">name=LoadBalancer</span><br><span class="line">baseurl=file:///mnt/LoadBalancer</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><p>配置保存完成后，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all </span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="添加存储"><a href="#添加存储" class="headerlink" title="添加存储"></a>添加存储</h2><ol><li><p>安装<code>iscsi-initiator-utils</code>与<code>device-mapper-multipath</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y iscsi-initiator-utils device-mapper-multipath</span><br></pre></td></tr></table></figure></li><li><p>发现<code>iscsi</code>target</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iscsiadm -m discovery -t sendtargets -p &lt;targetIP1:PORT&gt;<span class="comment"># 发现target</span></span><br><span class="line">iscsiadm -m discovery -t sendtargets -p &lt;targetIP2:PORT&gt; <span class="comment"># 发现target</span></span><br><span class="line">chkconfig iscsi on   <span class="comment"># 开机启动iscsi服务</span></span><br><span class="line">iscsiadm -m node -T &lt;IQN1&gt; -p &lt;IP1:PORT&gt; --login<span class="comment"># 登录</span></span><br><span class="line">iscsiadm -m node -T &lt;IQN2&gt; -p &lt;IP2:PORT&gt; --login<span class="comment"># 登录</span></span><br><span class="line">iscsiadm -m node -T &lt;IQN1&gt; -p &lt;IP1:PORT&gt; --op update -n node.startup -v automatic<span class="comment"># 自动登录</span></span><br><span class="line">iscsiadm -m node -T &lt;IQN2&gt; -p &lt;IP2:PORT&gt; --op update -n node.startup -v automatic<span class="comment"># 自动登录</span></span><br></pre></td></tr></table></figure></li><li><p>生成<code>/etc/multipath.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpathconf --<span class="built_in">enable</span> --with_multipathd y</span><br></pre></td></tr></table></figure></li><li><p>启动<code>multipathd</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chkconfig multipathd on  <span class="comment"># 开机启动</span></span><br><span class="line">chkconfig --list multipathd <span class="comment"># 检查</span></span><br><span class="line">service multipathd restart<span class="comment"># 重启服务</span></span><br><span class="line">service multipathd status <span class="comment"># 检查</span></span><br></pre></td></tr></table></figure></li><li><p>查看多路径设</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipath -ll  <span class="comment"># 查看路径</span></span><br><span class="line">lsblk   <span class="comment"># 查看设备</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>ntp配置略</p><h1 id="安装luci"><a href="#安装luci" class="headerlink" title="安装luci"></a>安装luci</h1><ol><li>在节点1上安装<code>luci</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install luci</span><br></pre></td></tr></table></figure><h1 id="安装ricci-cman和rgmanager"><a href="#安装ricci-cman和rgmanager" class="headerlink" title="安装ricci,cman和rgmanager"></a>安装ricci,cman和rgmanager</h1><ol><li><p>在两个RHCS节点上安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ricci cman rgmanager</span><br></pre></td></tr></table></figure></li><li><p>配置<code>ricci</code>密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd ricci</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动luci"><a href="#启动luci" class="headerlink" title="启动luci"></a>启动luci</h1><p>使用<code>luci</code>配置集群要求在集群中安装并运行<code>ricci</code> </p><ol><li><p>启动<code>ricci</code>服务：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service ricci start  <span class="comment"># 启动服务</span></span><br><span class="line">chkconfig ricci on <span class="comment"># 开机启动</span></span><br></pre></td></tr></table></figure></li><li><p>启动<code>luci</code>服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service luci start <span class="comment"># 启动服务</span></span><br><span class="line">chkconfig luci on <span class="comment"># 开机启动</span></span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问<code>https://LUCI-IP:8084</code>来访问luci，当启动luci服务时，登录<code>url</code>会回显到标准输出。</p></li></ol><p><strong>注意</strong></p><p>初始情况下，只能通过root的身份验证信息访问；</p><p>如果 15 分钟后没有互动，则 <strong>luci</strong> 会处于闲置超时而让您退出。</p><h1 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h1><p>使用 <strong>luci</strong> 创建集群包括命名集群、在集群中添加集群节点、为每个节点输入 <strong>ricci</strong> 密码并提交创建集群请求。如果节点信息和密码正确，则 <strong>Conga</strong> 会自动在集群节点中安装软件（如果当前没有安装适当的软件包）并启动集群。按如下步骤创建集群：</p><ol><li><p>在 <strong>luci</strong> <strong>「Homebase」</strong>页面左侧菜单中点击<strong>「管理集群」</strong>。此时会出现<strong>「集群」</strong>页面。</p><p><img src="https://blog-image.nos-eastchina1.126.net/luci-01.png" alt=""></p></li></ol><ol><li><p>点击<strong>「创建」</strong>后出现<strong>「创建集群页面」</strong>。</p><p><img src="https://blog-image.nos-eastchina1.126.net/luci-03.png" alt=""></p><p><strong>图 3.3. 创建 luci 集群对话框</strong></p></li><li><p>请根据需要在<strong>「创建新集群」</strong>页面中输入以下参数：</p><ul><li><p>在<strong>「集群名称」</strong>文本框中输入集群名称。集群名称不能超过 15 个字符。</p></li><li><p>如果集群中的每个节点都有同样的 <strong>ricci</strong> 密码，您可以选择<strong>「在所有节点中使用相同的密码」</strong>，这样就可在您添加的节点中自动填写<strong>「密码」</strong>字段。</p></li><li><p>在<strong>「节点名称」</strong>栏中输入集群中节点的名称，并在<strong>「密码」</strong>栏中为该节点输入 <strong>ricci</strong>密码。</p></li><li><p>如果为您的系统配置了专门用于集群流量的专门的私有网络，则最好将 <strong>luci</strong> 配置为使用与集群节点名称解析拨通的地址与 <strong>ricci</strong> 进行沟通。您可以在<strong>「Ricci 主机名」</strong>中输入该地址达到此目的。</p></li><li><p>如果您要在 <strong>ricci</strong> 代理中使用不同的端口，而不是默认的 11111 端口，您可以更改那个参数。</p></li><li><p>点击<strong>「添加另一个节点」</strong>并输入节点名称，同时为集群的每个附加节点输入 <strong>ricci</strong> 密码。</p></li><li><p>如果您不想要在创建集群时升级已经在节点中安装的集群软件软件包，请选择<strong>「使用本地安装的软件包」</strong>选项。如果您要升级所有集群软件软件包，请选择<strong>「下载软件包」</strong>选项。</p><p><strong>注意</strong></p><p>如果缺少任意基本集群组件（<code>cman</code>、<code>rgmanager</code>、<code>modcluster</code> 及其所有相依性软件包），无论是选择<strong>「使用本地安装的软件包」</strong>，还是<strong>「下载软件包」</strong>选项，都会安装它们。如果没有安装它们，则创建节点会失败。</p></li><li><p>需要时选择<strong>「加入集群前重启节点」</strong>。</p></li><li><p>如果需要集群的存储，则请选择<strong>「启动共享存储支持」</strong>。这样做将下载支持集群存储的软件包，并启用集群的 LVM。您应该只能在可访问弹性存储附加组件或者可扩展文件系统附加组件时选择这个选项。</p></li></ul></li><li><p>点击 <strong>创建集群</strong>。点击 <strong>创建集群</strong> 后会有以下动作：</p><ol><li>如果您选择<strong>「下载软件包」</strong>，则会在节点中下载集群软件包。</li><li>在节点中安装集群软件（或者确认安装了正确的软件包）。</li><li>在集群的每个节点中更新并传推广群配置文件。</li><li>加入该集群的添加的节点</li></ol><p>显示的信息表示正在创建该集群。当集群准备好后，该显示会演示新创建集群的状态，请注意：如果没有在任何节点中运行 <strong>ricci</strong>，则该集群创建会失败。</p><p><img src="https://blog-image.nos-eastchina1.126.net/luci-04.png" alt=""></p></li><li><p>点击 <strong>创建集群</strong> 按钮创建集群后，您仍可以通过点击集群节点显示页面上部菜单中的<strong>「添加」</strong>或者<strong>「删除」</strong>功能从集群中添加或者删除节点。除非您要删除整个集群，否则必须在删除节点前停止它们。</p><p><strong>注意</strong></p><p>从集群中删除集群节点是一个破坏性操作，不能撤销。</p></li></ol><h1 id="配置Fence设备"><a href="#配置Fence设备" class="headerlink" title="配置Fence设备"></a>配置Fence设备</h1><h2 id="创建-Fence-设备"><a href="#创建-Fence-设备" class="headerlink" title="创建 Fence 设备"></a>创建 Fence 设备</h2><p>要创建 fence 设备请按照以下步骤执行：</p><ol><li>在<strong>「Fence 设备」</strong>配置页面中，点击<strong>「添加」</strong>。点击<strong>「添加」</strong>显示<strong>「添加 Fence 设备（事务）」</strong>对话框。在这个对话框中选择要配置的 fence 设备类型。</li><li>在<strong>「添加 Fence 设备（事务）」</strong>对话框中根据 fence 设备类型指定信息。</li><li>点击 <strong>提交</strong>。</li></ol><p>添加 fence 设备后，它会出现在<strong>「Fence 设备」</strong>配置页面中。</p><h1 id="为集群成员配置-FENCING"><a href="#为集群成员配置-FENCING" class="headerlink" title="为集群成员配置 FENCING"></a>为集群成员配置 FENCING</h1><p>完成创建集群和创建集群 fence 设备的初始步骤后，需要为集群节点配置 fencing。要在创建新集群后为节点配置 fencing 并为其配置 fence 设备，请按照本小节中的步骤执行。请注意：您必须为集群中的每个节点配置 fencing。</p><p>以下小节中提供了为节点配置单一 fence 设备、使用备份 fence 设备配置节点以及使用冗余电源配置节点的步骤：</p><h2 id="为节点配置单一-Fence-设备"><a href="#为节点配置单一-Fence-设备" class="headerlink" title="为节点配置单一 Fence 设备"></a>为节点配置单一 Fence 设备</h2><p>使用以下步骤配置有单一 fence 设备的节点。</p><ol><li><p>在具体集群页面中，您可以点击集群显示顶部的<strong>「节点」</strong>，为集群中的节点配置 fencing。这样做会显示组成集群的节点。当您点击 luci <strong>「Homebase」</strong>页面左侧菜单中的<strong>「管理集群」</strong>项下的集群名称时会出现这个默认页面。</p></li><li><p>点击节点名称。点击节点链接会出现一个演示如何配置该节点的页面。</p><p>在具体节点页面中显示所有目前在该节点中运行的服务，同时还显示该节点所在故障切换域。您可以点击其名称修改现有故障切换域。</p></li><li><p>请在具体节点页面的<strong>「Fence 设备」</strong>项下点击 <strong>添加 Fence 方法</strong>。此时会显示 <strong>在节点中添加 Fence 方法</strong> 对话框。</p></li><li><p>请输入为这个节点配置的 fencing 方法的<strong>「方法名」</strong>。这可以是红帽高可用性附加组件使用的任意名称。这与该设备的 DNS 名称不同。</p></li><li><p>点击 <strong>提交</strong>。此时会显示具体节点页面，该页面中显示您刚刚在<strong>「Fence 设备」</strong>中添加的方法。</p></li><li><p>点击 fence 事务下的 <strong>添加 Fence 事务</strong> 标签为这个方法配置 fence 事务。此时会出现<strong>「添加 Fence 设备（事务）」</strong>下拉菜单，可从中选择您之前配置的 fence 设备。</p></li><li><p>为这个方法选择 fence 设备。如果这个 fence 设备需要您配置具体节点参数，则会显示要配置的参数。</p><p><strong>注意</strong></p><p>对于非电源 fence 方法（即 SAN/存储 fencing），会在具体节点参数显示中默认选择<strong>「取消 fencing（Unfencing）」</strong>。这可保证在重启该节点前不会重新启用被 fence 的节点对存储的访问。有关 unfencing 节点的详情请参考 <code>fence_node</code>(8) man page。</p></li><li><p>点击 <strong>提交</strong>。此时会返回显示 fence 方法和 fence 事务的具体节点页面。</p></li></ol><h1 id="配置故障切换域"><a href="#配置故障切换域" class="headerlink" title="配置故障切换域"></a>配置故障切换域</h1><p>故障切换域是一个命名的集群节点子集，它可在节点失败事件中运行集群服务。故障切换域有以下特征：</p><ul><li><p>无限制 — 允许您为在子集指定首选成员子集，但分配给这个域名的集群服务可在任意可用成员中运行。</p></li><li><p>限制 — 允许您限制可运行具体集群服务的成员。如果在限制故障切换域中没有可用成员，则无法启动集群服务（手动或者使用集群软件均不可行）。</p></li><li><p>无序 — 当将一个集群服务分配给一个无序故障切换域时，则可从可用故障切换域成员中随机选择运行集群服务的成员，没有优先顺序。</p></li><li><p>有序的 — 可让您在故障切换域的成员间指定顺序。该列表顶端的成员是首选成员，接下来是列表中的第二个成员，依此类推。</p></li><li><p>故障恢复 — 允许您指定在故障切换域中的服务是否应该恢复到节点失败前最初运行的节点。配置这个特性在作为有序故障切换域一部分节点重复失败的环境中很有帮助。在那种情况下，如果某个节点是故障切换域中的首选节点，在可能在首选节点和其它节点间重复切换和恢复某个服务，从而不会对性能产生严重影响。</p><p><strong>注意</strong></p><p>故障恢复特性只适用于配置了有序故障切换的集群。</p></li></ul><p><strong>注意</strong></p><p>更改故障切换域配置对目前运行中的服务无效。</p><p><strong>注意</strong></p><p>操作<em>不需要</em>的故障切换域。</p><p>默认情况下故障切换域为无限制和无序的。</p><p>在由几个成员组成的集群中，使用限制故障切换域可最大程度降低设置集群以便运行集群服务的工作（比如 <code>httpd</code>），它要求您在运行该集群服务的所有成员中进行完全一致的配置。您不需要将整个集群设置为运行该集群服务，只要设置与该集群服务关联的限制故障切换域中的成员即可。</p><p><strong>注意</strong></p><p>要配置首选成员，您可以创建只有一个集群成员的无限制故障切换域。这样做就让集群服务主要在那个集群成员（首选成员）中运行，但允许将该集群服务故障切换到任意其它成员中。</p><h2 id="添加故障切换域"><a href="#添加故障切换域" class="headerlink" title="添加故障切换域"></a>添加故障切换域</h2><p>要添加故障切换域，请按照本小节中的步骤执行。</p><ol><li><p>在具体集群页面中，您可以点击集群显示顶部的<strong>「故障切换域」</strong>为那个集群配置故障切换域。此时会显示为这个集群配置的故障切换域。</p></li><li><p>点击<strong>「添加」</strong>。点击<strong>「添加」</strong>时会显示<strong>「在集群中添加故障切换域」</strong>。</p><p><img src="https://blog-image.nos-eastchina1.126.net/failover-01.png" alt=""></p></li></ol><ol><li><p>在<strong>「在集群中添加故障切换域」</strong>对话框的<strong>「名称」</strong>文本框中指定故障切换域名称。</p><p><strong>注意</strong></p><p>该名称应该可以与集群中其它名称所显示的目的区别。</p></li><li><p>要启用在故障切换域成员间设置故障切换优先权，请点击<strong>「优先的」</strong>复选框。选择<strong>「优先的」</strong>复选框后，您可以为选择作为故障切换域成员的每个节点设置优先值，<strong>「优先权」</strong>。</p></li><li><p>要限制这个故障切换域成员的故障切换，请点击<strong>「有限」</strong>复选框。选择<strong>「有限」</strong>复选框后，分配给这个故障切换域的服务只能切换到这个故障切换域中的节点。</p></li><li><p>要将那个节点指定为不在这个故障切换域中恢复，请点击<strong>「无故障恢复」</strong>复选框。选择<strong>「无故障恢复」</strong>后，如果从首选节点中恢复某个服务，则该服务不会切换到恢复它的节点中。</p></li><li><p>配置这个故障切换域的成员。为每个要成为故障切换域成员的节点点击<strong>「成员」</strong>复选框。如果选择<strong>「优先的」</strong>复选框，则请为故障切换域每个成员在<strong>「优先权」</strong>文本框中设置优先权。</p></li><li><p>点击 <strong>创建</strong> 按钮。此时会显示新创建故障切换域的<strong>「故障切换域」</strong>页面。出现一条信息显示创建了新的域。刷新该页面查看更新的状态。</p></li></ol><h1 id="配置全局集群资源"><a href="#配置全局集群资源" class="headerlink" title="配置全局集群资源"></a>配置全局集群资源</h1><p>您可以配置在集群中运行的任意服务所使用的全局资源，还可以配置只可用于具体服务的资源。</p><p>要添加全局集群资源，请按照本小节中的步骤操作。您可在配置该服务时，添加属于具体服务的本地资源</p><ol><li>在具体集群页面中，您可点击集群显示顶部的<strong>「资源」</strong>菜单在那个集群中添加资源。此时会显示已经为那个集群添加的资源。</li><li>点击<strong>「添加」</strong>。此时会显示<strong>「在集群中添加资源」</strong>下拉菜单。</li><li>点击<strong>「在集群中添加资源」</strong>中的下拉框并选择要配置的资源类型。</li><li>输入您要添加资源的资源参数。</li><li>点击 <strong>提交</strong>。点击 <strong>提交</strong> 按钮会返回显示<strong>「资源」</strong>信息的资源页面，此时该页面会显示添加的资源（和其它资源）。</li></ol><p>要修改现有资源，请执行以下步骤。</p><ol><li>在 <strong>luci</strong> <strong>「资源」</strong>页面中点击要修改的资源名称。此时会显示那个资源的参数。</li><li>编辑该资源的参数。</li><li>点击 <strong>应用</strong>。</li></ol><p>要删除现有资源，请执行以下步骤。</p><ol><li>在 <strong>luci</strong> <strong>「资源」</strong>页面中选择所有要删除资源。</li><li>点击<strong>「删除」</strong>。</li></ol><h1 id="在集群中添加集群服务"><a href="#在集群中添加集群服务" class="headerlink" title="在集群中添加集群服务"></a>在集群中添加集群服务</h1><ol><li><p>在具体集群页面中您可以点击集群显示顶部的<strong>「服务组」</strong>菜单在那个集群中添加服务。此时会显示已经为那个集群配置的服务。</p></li><li><p>点击<strong>「添加」</strong>。此时会显示<strong>「在集群中添加服务组」</strong>对话框。</p></li><li><p>在<strong>「在集群中添加服务组」</strong>对话框的<strong>「服务名称」</strong>文本框中输入该服务名称。</p><p><strong>注意</strong></p><p>请使用可明确与集群中的其它服务区别开来的描述性名称。</p></li><li><p>如果您想在启动并运行集群时自动启动该服务，请选择<strong>「自动启动这个服务」</strong>复选框。如果<em>没有</em>选择这个复选框，则您必须在集群不处于停止状态时手动启动该服务。</p></li><li><p>选择<strong>「独家运行」</strong>复选框设置策略，即该服务只在没有其它服务运行的节点中运行。</p></li><li><p>如果您已经为该集群配置了故障切换域，您可以使用<strong>「故障切换域」</strong>参数的下拉菜单为该服务选择故障切换域。</p></li><li><p>使用<strong>「恢复策略」</strong>下拉框为该服务选择恢复策略。选项包括 <strong>「重新定位」</strong>、<strong>「重启」</strong>、<strong>「重启-禁用」</strong> 或者 <strong>「禁用」</strong>该服务。</p><p>选择<strong>「重启」</strong>选项表示在重新定位该服务前系统应尝试重启失败的服务。选择<strong>「重新定位」</strong>选项表示系统应在不同节点中重启该服务。选择<strong>「禁用」</strong>选项表示如果任意组件失败，系统就应禁用该资源组。选择<strong>「重启-禁用」</strong>选项表示该服务失败的位置尝试重启该服务，但如果重启失败，则将禁用服务而不是移动到集群的另一台主机中。</p><p>如果您选择<strong>「重启」</strong>或者<strong>「重启-禁用」</strong>作为该服务的恢复策略，您可以指定重新定位或者禁用该服务前最多重启失败的次数，您还可以在多少秒后不再重启。</p></li><li><p>要在服务中添加资源，请点击 <strong>添加资源</strong>。点击 <strong>添加资源</strong> 按钮会显示一个 <strong>在服务中添加资源</strong> 下拉菜单，您可从中选择要添加的现有全局资源，或者添加一个<em>只可</em>用于这个服务的新资源。</p><ul><li><p>要添加现有全局资源，请在 <strong>在服务中添加资源</strong> 下拉框中点击现有资源名称。此时会显示在您所配置服务的<strong>「服务组」</strong>页面中的资源及其参数。</p></li><li><p>要添加只可用于这个服务的新资源，请在 <strong>在服务中添加资源</strong> 下拉框中选择要配置的资源类型并为您要添加的资源输入资源参数。</p></li><li><p>当在服务中添加资源时，无论它是现有全局资源，还是只可用于这个服务的资源，您可将该资源指定为<strong>「独立子树」</strong>或者<strong>「非关键资源」</strong>。</p><p>如果您将资源指定为独立子树，那么如果该资源失败，则在系统尝试常规恢复前只会重启那个资源（而不是整个服务）。您可以指定在该节点中为该服务使用恢复策略前最多尝试重启该资源的次数。您还可以指定在多少秒后系统将为该服务使用恢复策略。</p><p>如果您将该资源指定为非关键资源，那么如果那个资源失败，则只需要重启该资源。同时如果该资源仍失败，那么只会禁用那个资源而不是整个服务。您可以指定在该节点中禁用该资源前最多重启该资源的次数。您还可以指定在多少秒后系统将禁用该资源。</p></li></ul></li><li><p>如果您要在您定义的资源中添加子资源，请点击 <strong>添加子资源</strong>。点击 <strong>添加子资源</strong> 后会显示<strong>「在服务中添加资源」</strong>下拉框，您可从中添加现有全局资源或者添加只可用于这个服务的新资源。您可以继续为这个资源添加子资源以适应您的要求。</p><p><strong>注意</strong></p><p>如果您要添加 Samba 服务资源，请将 Samba 服务资源直接连接到该服务，而<em>不是</em>服务中的资源。</p></li><li><p>当您完成为该服务添加资源，并完成为资源添加子资源时，点击 <strong>提交</strong>。点击 <strong>提交</strong> 按钮后会返回显示添加的服务（以及其它服务）的<strong>「服务组」</strong>页面。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础环境信息&quot;&gt;&lt;a href=&quot;#基础环境信息&quot; class=&quot;headerlink&quot; title=&quot;基础环境信息&quot;&gt;&lt;/a&gt;基础环境信息&lt;/h1&gt;&lt;p&gt;描述本次基础环境信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-image.nos-eastchina1.126.net/9159.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RHCS" scheme="https://www.sysctl.me/tags/RHCS/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装JAVA-JDK</title>
    <link href="https://www.sysctl.me/2019/07/03/Linux/JAVA/Install-the-JDK/"/>
    <id>https://www.sysctl.me/2019/07/03/Linux/JAVA/Install-the-JDK/</id>
    <published>2019-07-03T11:20:00.000Z</published>
    <updated>2020-01-22T14:33:25.135Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本教程可帮助您在系统上安装Java 8或更新Java。在从Linux命令行下载Java之前，请仔细阅读说明。</strong></p><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>JDK下载链接</td><td><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></td></tr></tbody></table></div><a id="more"></a><h1 id="Step-1-–-下载最新的Java"><a href="#Step-1-–-下载最新的Java" class="headerlink" title="Step 1 – 下载最新的Java"></a>Step 1 – 下载最新的Java</h1><p>Oracle团队提供Java RPM包以及编译的源代码。很多次我尝试使用rpm包安装Java，但是我遇到了一些问题。所以我决定使用已编译的源代码安装Java。从那以后，我在CentOS上安装了大量Java，基于Redhat的系统没有任何问题。要从其<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官方下载页面</a>下载最新的Java SE Development Kit 8版本，或使用以下命令从shell下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"</span> <span class="string">"https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz"</span></span><br><span class="line">tar xzf jdk-8u201-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h1 id="Step-2-–-使用Alternatives安装Java-8"><a href="#Step-2-–-使用Alternatives安装Java-8" class="headerlink" title="Step 2 – 使用Alternatives安装Java 8"></a>Step 2 – 使用Alternatives安装Java 8</h1><p>alternatives命令用于维护符号链接。此命令用于创建，删除，维护和显示有关包含备选系统的符号链接的信息。让我们使用<code>alternatives</code>命令在您的系统上配置Java。<code>alternative</code>命令在<strong>chkconfig</strong>包中可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jdk1.8.0_201/</span><br><span class="line">alternatives --install /usr/bin/java java /opt/jdk1.8.0_201/bin/java 2</span><br><span class="line">alternatives --config java</span><br></pre></td></tr></table></figure><p>新安装的Java版本列在第n位，因此输入n并按Enter键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">There are 3 programs which provide &#39;java&#39;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">   1           &#x2F;opt&#x2F;jdk1.8.0_45&#x2F;bin&#x2F;java</span><br><span class="line"> * 2           &#x2F;opt&#x2F;jdk1.8.0_144&#x2F;bin&#x2F;java</span><br><span class="line"> + 3           &#x2F;opt&#x2F;jdk-11&#x2F;bin&#x2F;java</span><br><span class="line">   4           &#x2F;opt&#x2F;jdk1.8.0_201&#x2F;bin&#x2F;java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 4</span><br></pre></td></tr></table></figure><p>此时，JAVA 8已成功安装在您的系统上。我们还建议使用替代方法设置javac和jar命令路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alternatives --install &#x2F;usr&#x2F;bin&#x2F;jar jar &#x2F;opt&#x2F;jdk1.8.0_201&#x2F;bin&#x2F;jar 2</span><br><span class="line">alternatives --install &#x2F;usr&#x2F;bin&#x2F;javac javac &#x2F;opt&#x2F;jdk1.8.0_201&#x2F;bin&#x2F;javac 2</span><br><span class="line">alternatives --set jar &#x2F;opt&#x2F;jdk1.8.0_201&#x2F;bin&#x2F;jar</span><br><span class="line">alternatives --set javac &#x2F;opt&#x2F;jdk1.8.0_201&#x2F;bin&#x2F;javac</span><br></pre></td></tr></table></figure><h1 id="Step-3-–-检查已安装的Java版本"><a href="#Step-3-–-检查已安装的Java版本" class="headerlink" title="Step 3 – 检查已安装的Java版本"></a>Step 3 – 检查已安装的Java版本</h1><p>Java和javac二进制文件在PATH环境变量下可用。您可以在系统中的任何位置使用它们。让我们通过执行以下命令检查系统上安装的Java运行时环境（JRE）版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">java version <span class="string">"1.8.0_201"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="Step-4-–-设置Java环境变量"><a href="#Step-4-–-设置Java环境变量" class="headerlink" title="Step 4 – 设置Java环境变量"></a>Step 4 – 设置Java环境变量</h1><p>大多数基于Java的应用程序使用环境变量来工作。使用以下命令设置Java环境变量</p><p>设置<strong>JAVA_HOME</strong>，<strong>JRE_HOME</strong>和<strong>PATH</strong>环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_201</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/opt/jdk1.8.0_201/jre</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/jdk1.8.0_201/bin:/opt/jdk1.8.0_201/jre/bin</span><br></pre></td></tr></table></figure><p>还要将上述命令添加到<code>/etc/bashrc</code>或<code>/etc/profile</code>文件中以自动设置环境变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本教程可帮助您在系统上安装Java 8或更新Java。在从Linux命令行下载Java之前，请仔细阅读说明。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JDK下载链接&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://www.sysctl.me/categories/JAVA/"/>
    
    
      <category term="JDK" scheme="https://www.sysctl.me/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化模板制作-CentOS7</title>
    <link href="https://www.sysctl.me/2019/02/03/vSphere/Virtual-template-production-CentOS7/"/>
    <id>https://www.sysctl.me/2019/02/03/vSphere/Virtual-template-production-CentOS7/</id>
    <published>2019-02-03T13:00:11.000Z</published>
    <updated>2020-01-22T14:38:43.361Z</updated>
    
    <content type="html"><![CDATA[<p>有关CentOS6的制作我大概思路已经做过一篇<a href="https://www.sysctl.me/2017/07/12/vmawre">文章</a>，本来是希望读者根据这篇来尝试其他release的模板，再加上之前的文章可能对小白有点不友好，<a href="https://www.sysctl.me/2017/07/14/gparted">我以为SWAP和磁盘分区的问题大家是可以解决的</a>，加上最近同事有这方面的需要，就再次整理一篇。</p><blockquote><p>还是希望大家不是简单的<kbd>Ctrl</kbd> + <kbd>C</kbd>。</p></blockquote><p>这次的需求呢，是这样：</p><ol><li>网卡配置</li><li>IP地址分发</li><li>强制修改密码（有点简陋）</li><li>磁盘分区问题</li></ol><p>涉及到什么？<br><a id="more"></a></p><ol><li><code>ifcfg</code></li><li>跟<code>udev</code>没什么关系的<code>udev</code></li><li><code>profile</code></li><li><code>sed</code></li><li>自定义规范</li><li>清理工作</li></ol><p>希望读者读完这篇Step By Step一样的文档后可以理解：</p><ul><li>模板制作根本就不是模板，而是基于虚拟磁盘文件（<code>vmdk</code>）的复制及虚拟机配置文件（<code>vmx</code>）重建的过程</li><li>您做模板的目的是为了什么？</li><li>能否理解每个操作都是在做什么</li><li>为什么要通过这些操作，修改或删除一些内容</li><li>如果我的文章没能满足你的需求，您需要如何改进？</li></ul><h1 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h1><p><em>略去安装系统的步骤，（我想如果装不上系统，模板的需求也不强烈，那你就多装几次，23333）。</em></p><p>文字描述下过程：</p><ul><li><p>下载ISO，上传到数据存储</p></li><li><p>一个满足通用需求磁盘大小的虚拟机</p></li><li><p>安装CentOS7</p></li><li><p>巴拉巴拉</p></li></ul><h1 id="转换为模板之前的准备工作"><a href="#转换为模板之前的准备工作" class="headerlink" title="转换为模板之前的准备工作"></a>转换为模板之前的准备工作</h1><ul><li><p>更新系统（如果有内网源，最好封装到模板）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure></li><li><p>安装<code>vmtools</code>:</p><p>安装vmtools（这里有点问题，你到底是选open-vm-tools，还是vmware自带的iso）</p><p>这里vmware官方建议的是7版本以后使用<code>open-vm-tools</code>原因是通过rpm包分发的方式，且宿主机管理vmtools。</p><p>安装<code>open-vm-tools</code>(两者选一)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install open-vm-tools -y </span><br><span class="line">systemctl restart vmtoolsd</span><br></pre></td></tr></table></figure></li><li><p>检查网络配置文件</p><p>这里就是把网卡配置的<code>UUID</code>和<code>HWADDR</code>删掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^(HWADDR|UUID)=/d'</span> /etc/sysconfig/network-scripts/ifcfg-xxx  (xxx为网卡配置文件名)</span><br></pre></td></tr></table></figure></li><li><p>删除udev：</p><p>这里其实是不用删除的，如果担心可以看下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/udev/rules.d/</span><br><span class="line">rm -rf /etc/udev/rules.d/70-*  <span class="comment"># 如果存在则删除</span></span><br></pre></td></tr></table></figure></li><li><p>配置ntp：</p><p>这里可选，如需要则可以安装<code>chrony</code>然后配置平时常用的ntp服务器地址</p></li><li><p>配置第一次登陆修改密码:</p><p>在<code>/etc/profile</code>末尾追加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd ; nmtui ; <span class="built_in">history</span> -c ; sed -i <span class="string">'$d'</span> /etc/profile <span class="comment"># 这里根据自己的需要调整。</span></span><br></pre></td></tr></table></figure><blockquote><p>别写错了，修改前要清除自己的操作是在干什么 有什么风险。</p></blockquote></li><li><p>删除<code>machine-id</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line">chmod 777 machine-id</span><br><span class="line">vi machine-id <span class="comment"># 删除machine id 删完保存</span></span><br><span class="line">chmod 444 machine-id   <span class="comment"># 还原权限。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>清空日志及其临时文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm –rf /tmp/*</span><br><span class="line">rm –rf /var/tmp/*</span><br><span class="line">systemctl stop rsyslog</span><br><span class="line">systemctl stop auditd</span><br><span class="line">rm –f /var/<span class="built_in">log</span>/*-???????? /var/<span class="built_in">log</span>/*.gz   <span class="comment"># 注意这步，选择进行。</span></span><br><span class="line">rm -f /var/<span class="built_in">log</span>/dmesg.old</span><br><span class="line">rm -rf /var/<span class="built_in">log</span>/anaconda</span><br><span class="line">rm -rf /etc/ssh/ssh_host_*</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/wtmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/btmp</span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line"><span class="built_in">echo</span> &gt; ~/.bash_history</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令完成系统封装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys-unconfig</span><br></pre></td></tr></table></figure></li></ul><p>接下来，系统会自动关机。然后右键此虚拟机，转换为模板。</p><h1 id="自定义虚拟机规范文件"><a href="#自定义虚拟机规范文件" class="headerlink" title="自定义虚拟机规范文件"></a>自定义虚拟机规范文件</h1><blockquote><p>自定义规范的步骤参照<a href="https://www.sysctl.me/2019/02/03/vSphere/虚拟化模板制作-Win">win模板制作</a>。</p></blockquote><p>配置完自定义规范文件，部署虚拟机时选择需要的规范文件就可以根据向导并且配置ip了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关CentOS6的制作我大概思路已经做过一篇&lt;a href=&quot;https://www.sysctl.me/2017/07/12/vmawre&quot;&gt;文章&lt;/a&gt;，本来是希望读者根据这篇来尝试其他release的模板，再加上之前的文章可能对小白有点不友好，&lt;a href=&quot;https://www.sysctl.me/2017/07/14/gparted&quot;&gt;我以为SWAP和磁盘分区的问题大家是可以解决的&lt;/a&gt;，加上最近同事有这方面的需要，就再次整理一篇。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还是希望大家不是简单的&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次的需求呢，是这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网卡配置&lt;/li&gt;
&lt;li&gt;IP地址分发&lt;/li&gt;
&lt;li&gt;强制修改密码（有点简陋）&lt;/li&gt;
&lt;li&gt;磁盘分区问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;涉及到什么？&lt;br&gt;
    
    </summary>
    
    
      <category term="Vmware" scheme="https://www.sysctl.me/categories/Vmware/"/>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/tags/Linux/"/>
    
      <category term="Vmware" scheme="https://www.sysctl.me/tags/Vmware/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化模板制作-Windows</title>
    <link href="https://www.sysctl.me/2019/02/03/vSphere/Virtual-template-production-Win/"/>
    <id>https://www.sysctl.me/2019/02/03/vSphere/Virtual-template-production-Win/</id>
    <published>2019-02-03T13:00:11.000Z</published>
    <updated>2020-01-22T14:38:46.619Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于Win的虚拟化模板，vSphere上其实没什么难度，这里介绍的制作方式也不是唯一的，仅仅是提供一个制作的思路，如果有特殊需求，根据现有方案拓展即可。</p></blockquote><h1 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h1><ul><li>这次的需求有一下这几点<ol><li>重新封装</li><li>重新设置密码（有点歧义）</li><li>IP地址需要定义</li><li>SID唯一</li><li>优雅（尽量优雅）</li><li>尽量减少二次重复操作</li><li>vmtools安装</li></ol></li><li>涉及到的组件<ol><li>Windows</li><li>vmtools</li><li>自定义规范</li></ol></li></ul><a id="more"></a><p>==有关模板的制作其实就是克隆<code>vmdk</code>且重建虚拟机文件<code>vmx</code>，不信我真没办法。==</p><h1 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h1><ul><li><p>首先创建虚拟机</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-1.jpg" alt="安装系统1"></p><p>这里就随便拉，最好移除软盘驱动器。</p></li><li><p>打开虚拟机</p><p>根据需求选择语言和keyboard，选择对应版本。</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-2.jpg" alt="安装系统2"></p></li><li><p>创建系统分区</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-3.jpg" alt="安装系统2"></p></li><li><p>等待安装完成</p></li></ul><h1 id="转换为模板之前的准备工作"><a href="#转换为模板之前的准备工作" class="headerlink" title="转换为模板之前的准备工作"></a>转换为模板之前的准备工作</h1><h2 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h2><p>因为是用于vSphere，所以第一步最好先安装对应系统的<code>vmtools</code>，要不鼠标卡的一逼。</p><ul><li><p>挂载VMware Tools</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-4.jpg" alt="安装vmtools1"></p></li><li><p>安装Tools</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-5.jpg" alt="安装vmtools2"></p><p>运行。</p><p> <img src="https://blog-image.nos-eastchina1.126.net/win-temp-6.jpg" alt="安装vmtools3"></p><p>选择完整安装，下一步。</p><blockquote><p>这里说下为什么不选典型；其实典型是可以的，But！！！很多第三方，比如杀毒一类的产品会需要一些驱动，典型安装时没有勾选的。（NSX也会）</p></blockquote></li><li><p>重启</p></li></ul><h2 id="操作系统配置"><a href="#操作系统配置" class="headerlink" title="操作系统配置"></a>操作系统配置</h2><p>在这之前，你要明确你模板里需要集成哪些配置，这里我举例我的环境下需要配置的东西（根据自身环境修改）：</p><ol><li>远程桌面总得开吧</li><li>防火墙可以先关闭掉</li><li>WSUS（自己百度）</li><li>你可能还需要更新补丁</li><li>KMS</li><li>VM Tools</li><li>可能需要配置NTP</li></ol><p>因为我这是一个相对干净的需求，所以都是基础配置。</p><p>接下来我将这些内容封装在我的模板中（基本配置不截图了）。</p><ul><li>vmtools（已完成）</li><li>配置IP地址</li><li>指定KMS服务器</li><li>时间同步</li><li>指定WSUS</li><li>安装所需补丁（重启继续）</li><li>你可能还需要移除软盘驱动器，或者还有DVD驱动器</li><li>一些简单的系统配置例如<ul><li>允许远程桌面</li><li>性能选项调整为最佳性能</li><li>虚拟内存这东西没必要的话可以干掉</li><li>调整你的防火墙策略（或者干掉）</li><li>我想IE ESC应该也不是你需要的吧，关掉</li><li>启动和故障恢复中的操作系统列表时间调整为5s左右</li><li>一些常用的组策略</li><li>IE主页（如果你需要的话）</li><li>可能你还需要禁用C盘的索引</li><li>碎片整理巴拉巴拉</li><li>也可以选择禁用优化选项</li><li>账户控制设置可能需要根据你的偏好修改</li><li>清理事件日志</li><li>等等</li></ul></li><li>你还需要安装一些通用的软件<ul><li>Telnet客户端</li><li><code>.NET Framework</code></li><li>可能还需要解压缩</li><li>说不准你要安装一个浏览器</li><li>如果你的环境里需要部署某些<code>agent</code>例如备份或监控</li></ul></li></ul><p>上述所有操作都是可选的，根据自己需求。接下来咱们来看下当前系统的SID</p><p>打开命令行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /user</span><br></pre></td></tr></table></figure><p>记住这个。</p><p>现在清空你的网络配置（IP地址）</p><p>然后打开sysprep：</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-7.jpg" alt="sysprep"></p><p>点击确认。系统会关机。</p><blockquote><p>Windows的准备工作基本完成。</p><p>这里要注意，如果使用了<code>sysprep</code>，请不要重复使用使用自定义规范，两者选一个，如果你有更改主机名和ip地址的需求，转换前请勿使用<code>sysprep</code>实用程序进行封装。</p></blockquote><h1 id="自定义规范"><a href="#自定义规范" class="headerlink" title="自定义规范"></a>自定义规范</h1><p>主角来了。</p><ul><li><p>策略和配置文件</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-8.jpg" alt="自定义规范1"></p></li><li><p>新建虚拟机客户机自定义规范</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-9.jpg" alt="vm规范"></p></li><li><p>根据需要选择，我这里只选择系统版本和sid，如果你有特定的<code>sysprep</code>文件，可以指定</p></li><li><p>组织名称随便填</p></li><li><p>计算机名称选择<code>在部署向导中输入名称</code></p></li><li><p>产品秘钥没有</p></li><li><p>密码这块根据需要选择吧。我一般不选择，因为已经设置了重新封装。</p></li><li><p>选择时区</p></li><li><p>命令可选</p></li><li><p>网络选择<code>手动选择自定义设置</code>，编辑网络，选择<code>使用规范时,提示用户输入Ipv4</code>，v6地址根据你需求来吧</p></li><li><p>选择工作组</p></li></ul><h1 id="转换为模板"><a href="#转换为模板" class="headerlink" title="转换为模板"></a>转换为模板</h1><p>首选咱们找到刚才准备的模板虚拟机。</p><p>为了方便调整母模板，建议这里选择克隆为模板，当然你也可以直接转换为模板（这样不保留原虚拟机）。</p><h1 id="从模板部署虚拟机"><a href="#从模板部署虚拟机" class="headerlink" title="从模板部署虚拟机"></a>从模板部署虚拟机</h1><ul><li><p>从模板新建虚拟机</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-11.jpg" alt="从模板新建虚拟机"></p></li><li><p>选择资源池和存储就不截图了</p></li><li><p>克隆选项了解一下</p><p>根据自己的喜好选</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-12.jpg" alt="从模板新建虚拟机"></p></li><li><p>选择之前准备好的自定义规范</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-13.jpg" alt="选择规范"></p></li><li><p>指定主机名和ip地址</p><p><img src="https://blog-image.nos-eastchina1.126.net/win-temp-14.jpg" alt="指定ip地址"></p></li><li><p>虚拟机硬件配置根据自己的需要适当修改</p></li><li><p>部署完打开电源</p></li></ul><blockquote><p>这里希望你能明白，自定义规范是如何实现的。当你通过自定义规范部署win时，部署完的虚拟机会再次重启。完成配置。所以要注意，不要在此期间（虽然很短）做重要配置。</p></blockquote><h1 id="检查通过模板部署的虚拟机"><a href="#检查通过模板部署的虚拟机" class="headerlink" title="检查通过模板部署的虚拟机"></a>检查通过模板部署的虚拟机</h1><p><strong>可以检查以下几项：</strong></p><ul><li>主机名</li><li>IP地址是否下发</li><li>SID是否重置</li></ul><p>理想状态就是通过模板部署的虚拟机几乎不需要配置就可以提供给需要的工作人员。</p><p>模板不是一个一劳永逸的东西，它需要根据你业务环境的变化持续改进，变得越来越顺手，维护模板会涉及这几个内容：</p><ol><li>更新</li><li>预配置的修改</li><li>预部署软件的增删改</li></ol><p>模板的积累会成为最后的模板库。</p><p><em>因为模板用在你自己的环境中，慢慢你就会发现，模板里面既然能装chrome，telnet，那么我为什么不能装MSSQL呢，封装进去，再生成新的模板，直接提供SQL Server，直接提供IIS，或者巴拉巴拉的服务。</em></p><p><em>这不就是服务目录么?但，服务目录需要一个标准。没有人来定义这个标准是没办法做服务目录的。所以基于容器的PaaS才是趋势。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于Win的虚拟化模板，vSphere上其实没什么难度，这里介绍的制作方式也不是唯一的，仅仅是提供一个制作的思路，如果有特殊需求，根据现有方案拓展即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;这次的需求有一下这几点&lt;ol&gt;
&lt;li&gt;重新封装&lt;/li&gt;
&lt;li&gt;重新设置密码（有点歧义）&lt;/li&gt;
&lt;li&gt;IP地址需要定义&lt;/li&gt;
&lt;li&gt;SID唯一&lt;/li&gt;
&lt;li&gt;优雅（尽量优雅）&lt;/li&gt;
&lt;li&gt;尽量减少二次重复操作&lt;/li&gt;
&lt;li&gt;vmtools安装&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;涉及到的组件&lt;ol&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;vmtools&lt;/li&gt;
&lt;li&gt;自定义规范&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Vmware" scheme="https://www.sysctl.me/categories/Vmware/"/>
    
    
      <category term="Vmware" scheme="https://www.sysctl.me/tags/Vmware/"/>
    
      <category term="Windows" scheme="https://www.sysctl.me/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>影响存储和文件系统性能的因素</title>
    <link href="https://www.sysctl.me/2019/01/07/Linux/Performance-tuning/Storage%20and%20Filesystem/Factors-Affecting-Storage-and-File-System-Performance/"/>
    <id>https://www.sysctl.me/2019/01/07/Linux/Performance-tuning/Storage%20and%20Filesystem/Factors-Affecting-Storage-and-File-System-Performance/</id>
    <published>2019-01-07T15:13:00.000Z</published>
    <updated>2020-01-22T14:47:33.999Z</updated>
    
    <content type="html"><![CDATA[<p>存储和文件系统性能适当设置在很大程度上取决于存储的目的，I/O和文件系统性能会受下列因素的影响：</p><ul><li>数据的写入或读取模式</li><li>数据重新排列与底层对齐</li><li>块大小</li><li>日志大小和位置</li><li>记录访问时间</li><li>确保数据可靠性</li><li>预取数据</li><li>预分配磁盘空间</li><li>文件碎片</li><li>资源争用<a id="more"></a><h1 id="I-O调度器"><a href="#I-O调度器" class="headerlink" title="I/O调度器"></a>I/O调度器</h1></li></ul><p>I/O调度程序确定I/O操作在存储设备上运行的时间和持续时间。也被称为I/O elevator。</p><p>linux体用了三个I/O调度程序：</p><ul><li><p><strong>deadline</strong></p><p>除了SATA磁盘为所有块设备的默认I/O调度器。<code>deadline</code>尝试为指向到达I/O调度器的请求提供有保障的延迟。该调度器适合大多数用例，尤其适用于读取操作比写入操作更频繁的请求。</p><p>将排队的I/O请求分配为读或者写批处理，按照LBA递增顺序执行。默认设置下，读取批处理优先于写批处理，这是要因为应用程序可能组织读取I/O。批处理后，<code>deadline</code>检查写入操作因等待处理器世间而处于多久的饥饿状态，并且适当地调度下一个读批处理或写批处理。</p></li><li><p><strong>cfq</strong></p><p>默认调度器只适用于标识为SATA硬盘的设备。完全公平队列调度器，<code>cfq</code>，将进程分成第三个独立类型：实时，尽其所能和空闲。实时类别的进程总是先于尽其所能类别进程执行，而尽其所能类别进程总是在空闲类别进程之间执行。这意味着实时类别的进程可以使尽其所能和空闲进程等待处理器时间而忍受饥饿。默认设置下，分配进程到尽其所能类别。</p><p><code>cfq</code>使用历史数据来预测应用是否会在不久之后发出更多I/O请求。如果将有更多I/O请求，<code>cfq</code>空闲则会等待新的I/O，即使有来自其他进程的I/O在等待处理。</p><p>因为有空闲的趋势，<code>cfq</code>调度器不应用与连接不会引起大量搜寻penalty（惩罚）的硬件，除非它为此目的的而被调整。<code>cfq</code>调度器也不应用于连接其他断续工作型调度器，例如基于主机的硬件<code>RAID</code>控制器，因为这些调度器的堆叠有造成大量延迟的趋势。</p></li><li><p><strong>noop</strong></p><p><code>noop</code>I/O调度器实现了简单的FIFO（先入先出）调度算法。请求通过简单的最后命中缓存在通用块层合并。对于使用快速存储的CPU绑定系统，这可能是最佳调度器。</p></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="XFS"><a href="#XFS" class="headerlink" title="XFS"></a>XFS</h2><p>XFS是一个强大且高度可拓展的64位文件系统。他是CentOS7的默认文件系统。XFS使用基于区段的分配，并具有多种分配方案，包括预先分诶和延迟的分配，这两种都会减少碎片和提高性能。它还支持故障恢复的元数据日志。当挂载并激活时，能够对XFS进行碎片整理。</p><p>XFS支持最大容量可达500TB的文件系统，以及最大容量为8EB的文件偏移量（稀疏文件）。</p><h2 id="EXT4"><a href="#EXT4" class="headerlink" title="EXT4"></a>EXT4</h2><p>ext4是ext3文件系统的可缩放扩展。它的默认行为对大部分工作负载是最佳的。然而，它只支持最大容量为50TB的文件系统以及最大容量为16TB的文件。</p><h2 id="Btrfs"><a href="#Btrfs" class="headerlink" title="Btrfs"></a>Btrfs</h2><p>Btrfs（B-tree文件系统）是一种相对较新的写时复制（COW）文件系统，作为技术预览发布。一些独特的Btrfs功能包括：</p><ul><li>特定文件，卷或子卷而不是整个文件系统的快照；</li><li>支持多种廉价磁盘冗余阵列（RAID）；</li><li>返回将映射I/O错误引用到文件系统对象；</li><li>透明压缩（分区上的所有文件都自动压缩）;</li><li>数据和元数据的校验和。</li></ul><p>虽然Btrfs被认为是一个稳定的文件系统，但它还在不断发展，因此与更成熟的文件系统相比，某些功能（修复工具）是最基本的。</p><p>目前当需要高级功能（例如快照没压缩和文件数据校验和）时，选择Btrfs是合适的，但性能相对不重要。如果不需要高级功能，则失败和风险相对较弱的性能会使其他文件系统更受欢迎。与其他文件系统相比，另一个缺点是支持的最大文件系统大小为50TB。</p><h2 id="GFS2"><a href="#GFS2" class="headerlink" title="GFS2"></a>GFS2</h2><p>全局文件系统2（GFS2）是一个高可用行附加组件的一部分，提供集群文件系统支持。GFS2在集群中的所有服务器上提供一致的文件系统影响，允许服务器通中读取和写入单个共享文件系统。</p><p>支持GFS2，最大文件系统大小为100TB。</p><h1 id="文件系统的调整注意事项"><a href="#文件系统的调整注意事项" class="headerlink" title="文件系统的调整注意事项"></a>文件系统的调整注意事项</h1><h2 id="格式化时的注意事项"><a href="#格式化时的注意事项" class="headerlink" title="格式化时的注意事项"></a>格式化时的注意事项</h2><p>格式化设备后，无法更改某些文件系统部分的配置，格式化存储设备前要做的决定和可用选项。</p><ul><li><p><strong>Size</strong></p><p>按照工作负载创建合理大小的文件系统。较小的文件系统具有相应较短的备份时间，并且需要较少的时间和内存来进行文件系统检查。但是如果你的文件系统太小，其性能将受到高度碎片的影响。</p></li><li><p><strong>Block size</strong></p><p>块是文件系统的工作单元。块大小决定了单个块中可以存储多少数据，因此可以确定一次写入或读取的最小数据量。</p><p>默认块大小适用于大多数用例。但是如果块大小（或多个块的大小）与通常一次读取或写入的数据量相同或稍大，则文件系统将更好地执行并有效低存储数据。一个小文件仍将使用整个块。文件可以分布在多个块上，但这回产生额外的运行时开销。此外，某些文件系统仅限于一定数量的块，这反过来限制了文件系统的最大大小。</p><p>使用<code>mkfs</code>命令格式化设备时，块大小被指定为文件系统选项的一部分。指定块大小的参数因文件系统而异。</p></li><li><p><strong>Geometry</strong></p><p>文件系统几何涉及跨文件系统的数据分布。如果系统使用条带存储（如RAID），则可以在格式化设备时通过将数据和元数据与基础数据集合对齐来提高性能。</p><p>很多数据导出的推荐集合在使用特定文件系统格式化设备时会被自动设置。如果设备没有导出这些推荐几何，或想要变更推荐设置，使用<code>mkfs</code>格式化设备时，需要手动指定几何。</p></li><li><p><strong>External journals</strong></p><p>日志文件系统记录在执行操作之前在日志文件中执行写操作期间所做的更改。这降低了存储设备在系统崩溃或电源故障时损坏的可能性，并加快了恢复过程。</p><p>元数据密集型工作负载射击队日志频繁的更新。交大的日志使用更多内存，但会降低写入操作的频率。此外，通过将日志放在与主存储一样快或更快的专用存储上，可以改善具有元数据密集型工作负载的设备的查找时间。</p></li></ul><h2 id="挂载时的注意事项"><a href="#挂载时的注意事项" class="headerlink" title="挂载时的注意事项"></a>挂载时的注意事项</h2><blockquote><p>适用于大部分文件系统的调整决定，且可在挂载设备时指定。</p></blockquote><ul><li><p><strong>Barriers</strong></p><p>文件系统屏障确保文件系统元数据在持久存储上正确编写和排序，并且<code>fsync</code>在断电时传输的数据仍然存在。</p></li><li><p><strong>Access Time</strong></p><p>每次读取文件时，其元数据都会根据访问发生的时间（atime）进行更新。这涉及额外的写入I/O。在大多数情况下，这种开销很小，因为默认情况下，<code>atime</code>只有当上一次访问时间早于上次修改（mtime）或状态更改（ctime）时，才会更新字段。</p><p>但是，如果更新此元数据非常耗时，并且如果不需要准确的访问时间数据，则可以使用<code>noatime</code>mount选项挂载文件系统。这回在读取文件时禁用元数据更新。它还启用了<code>nodiratime</code>行为，在读取目录时禁用元数据更新。</p></li><li><p><strong>Read-ahead</strong></p><p>预读行为我通过预先获取可能很快需要的数据并将其加载到页面缓存中来加速文件访问，在页面缓存中可以比磁盘上更快地检索它。预读值越高，系统预取数据越早。</p><p>Linux尝试根据检测到的文件系统设置适当的预读值。但是并不总是能够进行准确的检测。例如，如果存储阵列将自身作为单个LUN呈现给系统，则系统会检测单个LUN，并不会为阵列设置适当的预读值。</p><p>设计大量顺序I/O流的工作负载通常受益于搞预读值。与使用LVM条带化一样，Linux提供的于存储相关的调优配置文件提高了预读值，但这些调整对于所有工作负载并不总是足够。</p></li></ul><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><blockquote><p>对于固态磁盘和精简配置存储，建议定期丢弃文件系统未使用的块。丢弃未使用块有两种方法：批量丢弃和在线丢弃。</p></blockquote><ul><li><p><strong>Batch discard（批量丢弃）</strong></p><p>这种丢弃是<code>fstrim</code>指令的一部分。它丢弃文件系统中与管理员指定的标准相匹配的所有不使用的块。</p><blockquote><p>CentOS支持XFS和ext4格式化设备上的batch discard，这些设备实际丢弃操作即<code>/sys/block/devname/queue/discard_max_bytes</code>值不为0的HDD设备和<code>/sys/block/sda/queue/discard_granularity</code>不为0的SSD。</p></blockquote></li><li><p><strong>online discard（在线丢弃）</strong></p><p>这种凡是的丢弃操作在挂载期间使用<code>discard</code>选项配置，实时运行不受用户干扰。然后。online discard只丢弃从使用转换到空闲的块。</p><blockquote><p>推荐使用batch discard 除非要求用 online discard 维持，或batch discard  不可用于系统工作负载。</p></blockquote></li><li><p><strong>Pre-allocation（预分配）</strong></p><p>预分配将磁盘空间标记为已经将磁盘空间分配给一个文件，而未将数据写入该空间。这可用于限制数据碎片和交叉的读取性能。CentOS支持XFS、ext4、GFS2设备预分配空间。应用程序也可以通过<code>fallocate</code>、<code>glibc</code>调用预先分配空间。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;存储和文件系统性能适当设置在很大程度上取决于存储的目的，I/O和文件系统性能会受下列因素的影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据的写入或读取模式&lt;/li&gt;
&lt;li&gt;数据重新排列与底层对齐&lt;/li&gt;
&lt;li&gt;块大小&lt;/li&gt;
&lt;li&gt;日志大小和位置&lt;/li&gt;
&lt;li&gt;记录访问时间&lt;/li&gt;
&lt;li&gt;确保数据可靠性&lt;/li&gt;
&lt;li&gt;预取数据&lt;/li&gt;
&lt;li&gt;预分配磁盘空间&lt;/li&gt;
&lt;li&gt;文件碎片&lt;/li&gt;
&lt;li&gt;资源争用
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="Storage and Filesystem" scheme="https://www.sysctl.me/tags/Storage-and-Filesystem/"/>
    
  </entry>
  
  <entry>
    <title>配置系统内存容量</title>
    <link href="https://www.sysctl.me/2019/01/06/Linux/Performance-tuning/MEMORY/Configure-system-memory-capacity/"/>
    <id>https://www.sysctl.me/2019/01/06/Linux/Performance-tuning/MEMORY/Configure-system-memory-capacity/</id>
    <published>2019-01-06T15:11:00.000Z</published>
    <updated>2020-01-22T14:34:17.194Z</updated>
    
    <content type="html"><![CDATA[<p>这些内核参数有可能有助于提高系统的内存利用率。通过更改<code>/proc</code>文件系统中相应的文件的值来临时设置这些参数以用于测试目的。确定用例生成最佳性能的值后，可以使用<code>sysctl</code>命令永久设置它们。</p><p>通常通过设置一个或多个内核参数的值来配置内存使用情况。可以通过更改<code>/proc</code>文件系统中文件的内容来临时设置这些参数，也可以使用<code>procps-ng</code>软件包提供的<code>sysctl</code>工具永久设置这些参数。</p><p>例如，要将<code>overcommit_memory</code>参数临时设置为1：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/overcommit_memory</span><br></pre></td></tr></table></figure></p><p>要永久设置这个值，在<code>/etc/sysctl.conf</code>文件中添加<code>vm.overcommit_memory=1</code>然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>临时设置参数对于确定参数对系统的影响很有用。然后，当确定参数的值有所需效果时，可以永久设置参数。</p><h1 id="虚拟内存参数"><a href="#虚拟内存参数" class="headerlink" title="虚拟内存参数"></a>虚拟内存参数</h1><blockquote><p>除非另有说明，否者列出的参数都位于<code>/proc/sys/vm</code>中。</p></blockquote><ul><li><p><strong>dirty_ratio</strong></p><p>百分比值，修改总系统内存的百分比时，系统开始使用<code>pdflush</code>操作将修改写入磁盘。默认为<code>20%</code>。</p></li><li><p><strong>dirty_background_ratio</strong></p><p>百分比值，修改系统总内存百分比时，系统开始后台将修改写入磁盘。默认值为<code>20%</code>。</p></li><li><p><strong>overcommit_memory</strong></p><p>定义是接受还是拒接大内存请求的条件。</p><p>默认值为<code>0</code>，默认情况下，内核通过估计可用内存量和过大的请求失败来执行启发式内存过量使用处理。但是由于使用启发式而非精准算法分配内存，因此使用此设置可以重载内存。</p><p>当此参数设置为1时，内核不执行内存过量使用处理。增加了内存过载的可能性，但提高了内存密集型任务的性能。</p><p>当此参数设置为<code>2</code>时，内核拒绝内存请求等于或大于总可用<code>SWAP</code>空间和<code>overcommit_ratio</code>中指定的物理RAM的百分比之和。这样可以降低过度使用内存的风险，但建议仅适用于交换区域大于物理内存的系统。</p></li><li><p><strong>overcommit_ratio</strong></p><p>指定当<code>overcommit_memory</code>设置为2时考虑的物理RAM的百分比。默认是<code>50%</code>。</p></li><li><p><strong>max_map_conut</strong></p><p>定义进程可以使用的最大内存映射区域数。默认为<code>65545</code>，适用于大多数情况。如果程序需要映射超过此数量的文件，增加此值。</p></li><li><p><strong>min_free_kbytes</strong></p><p>指定在系统中保持空闲的最小千字节数。这用于确定每个低内存区域的适当值，每个低内存区域都按照其大小按比例分配了多个保留的内存空闲页面。</p></li></ul><blockquote><p>极端值可能会损坏系统。将<code>min_free_kbytes</code>设置为极低值可防止系统回收内存，但这可能导致系统挂起和OOM终止进程。但是，将<code>min_free_kbytes</code>设置太高（例如，占用系统总内存的5%-10%）会导致系统立即进入内存不足的状态，从而导致系统话费太多时间回收内存。</p></blockquote><ul><li><p><strong>oom_adj</strong></p><p>如果系统内存不足并且<code>panic_on_oom</code>参数设置为<code>0</code>，则<code>oom_killer</code>函数会终止进程，知道系统可以从具有最高<code>oom_score</code>的进程开始恢复。</p><p><code>oom_adj</code>参数有助于确定进程的<code>oom_score</code>，此参数是根据进程标识符设置的。设置为<code>17</code>表示禁用进程<code>oom_killer</code>。其他有效值为<code>-16</code>到<code>15</code>。</p><blockquote><p>由调整后的进程生成的进程会集成进程的<code>oom_score</code>。</p></blockquote></li><li><p><strong>swappiness</strong></p><p><code>swappiness</code>值（0-100）控制系统支持的匿名内存或页面缓存程度。较高的值可提高文件系统性能，同时积极地将较少活动的进程从RAM中交换出来。较低的值可避免将进程交换到内存中，这通常或降低延迟，但代价是<code>I/O</code>性能。默认为<code>60</code>。</p><blockquote><p>设置<code>swappiness==0</code>将非常积极的避免交换。这增加了强内存和I/O压力下OOM被杀死的风险。</p></blockquote></li></ul><p>​    </p><h1 id="文件系统参数"><a href="#文件系统参数" class="headerlink" title="文件系统参数"></a>文件系统参数</h1><p>所列出的参数位于<code>/proc/sys/fs</code>.</p><ul><li><p><strong>aio-max-nr</strong></p><p>定义所有活动异步输入/输出上下文中允许的最大事件数。默认值为<code>65535</code>。修改此值不会预先分配或调整任何内核数据结构的大小。</p></li><li><p><strong>file-max</strong></p><p>确定整个系统的最大文件句柄数。默认值最大值是<code>8192</code>或者可用内存页面的十分之一。</p><p>提高此值可以解决由于缺少可用文件句柄而导致的错误。</p></li></ul><h1 id="内核参数"><a href="#内核参数" class="headerlink" title="内核参数"></a>内核参数</h1><p>以下参数的默认位于<code>/oroc/sys/kernel</code>中，可由内核在引导时根据可用的系统资源计算。</p><ul><li><p><strong>msgmax</strong></p><p>定义消息队列中任何单个消息的最大允许大小（以字节为单位）。该值不得超过队列的大小（msgmnb）。要确定系统上的当前<code>msgmax</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.msgmax</span><br></pre></td></tr></table></figure></li><li><p><strong>msgmnb</strong></p><p>定义单个消息队列的最大值（字节为单位），要确定系统上的当前<code>msgmnb</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.msgmnb</span><br></pre></td></tr></table></figure></li><li><p><strong>msgmni</strong></p><p>定义消息队列标识符的最大数量（以及队列的最大数量），要确定系统上的当前<code>msgmin</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.msgmni</span><br></pre></td></tr></table></figure></li><li><p><strong>shmall</strong></p><p>定义一次可在系统上使用的共享内存页面的总数，例如，x86_64架构上的页面为4096字节。</p><p>要确定系统当前<code>shmall</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.shmall</span><br></pre></td></tr></table></figure></li><li><p><strong>shmmax</strong></p><p>定义内核允许的单个共享内存段的最大大小（字节为单位）。要确定系统上的当前<code>shmmax</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.shmmax</span><br></pre></td></tr></table></figure></li><li><p><strong>shmmni</strong></p><p>定义系统范围的最大共享内存段数，所有系统上的默认值均为<code>4096</code>。</p></li><li><p><strong>threads-max</strong></p><p>定义一次可用于内核的系统阀内最大线程数。要确定系统上当前的 <code>threads-max</code>值，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.threads-max</span><br></pre></td></tr></table></figure><p>默认结果是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mempages/(8*THREAD_SIZE/PAGESIZE)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些内核参数有可能有助于提高系统的内存利用率。通过更改&lt;code&gt;/proc&lt;/code&gt;文件系统中相应的文件的值来临时设置这些参数以用于测试目的。确定用例生成最佳性能的值后，可以使用&lt;code&gt;sysctl&lt;/code&gt;命令永久设置它们。&lt;/p&gt;
&lt;p&gt;通常通过设置一个或多个内核参数的值来配置内存使用情况。可以通过更改&lt;code&gt;/proc&lt;/code&gt;文件系统中文件的内容来临时设置这些参数，也可以使用&lt;code&gt;procps-ng&lt;/code&gt;软件包提供的&lt;code&gt;sysctl&lt;/code&gt;工具永久设置这些参数。&lt;/p&gt;
&lt;p&gt;例如，要将&lt;code&gt;overcommit_memory&lt;/code&gt;参数临时设置为1：&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>配置大内存页</title>
    <link href="https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/MEMORY/Configure-large-memory-pages/"/>
    <id>https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/MEMORY/Configure-large-memory-pages/</id>
    <published>2019-01-03T13:22:00.000Z</published>
    <updated>2020-01-22T14:34:12.289Z</updated>
    
    <content type="html"><![CDATA[<p>有个两种方法可以保留大内存页：</p><ol><li>at <strong>boot time</strong>（启动时修改）</li><li>at <strong>run time</strong>（运行时修改）</li></ol><p>在 启动时保留会增加成功的可能性，因为内存尚未明显碎片化。但是在NUMA架构上，页面数量会自动在NUMA节点之间分配。运行时修改允许为每个NUMA节点保留大内存页。如果在引导过程中今早完成运行时预留，则内存碎片的可能性会降低。</p><h1 id="引导时配置大内存页"><a href="#引导时配置大内存页" class="headerlink" title="引导时配置大内存页"></a>引导时配置大内存页</h1><p>要在引导时配置大内存页，请将以下参数添加到内核引导命令行：</p><a id="more"></a><ul><li><p><code>hugepages</code></p><p>定义引导时在内核中配置的持久性大内存页的数量。默认值为0，如果系统中有足够的连续物理空闲页面，则只能分配大内存页。此参数保留的页不能用于其他目的。</p><p>通过修改<code>proc/sys/vm/nr_hugepages</code>文件的值在引导后使用。</p><p>在NUMA系统中，使用此参数分配的大内存页在节点之间平均分配。可以通过更改节点的值在运行时将大内存页分配给特定节点的<code>/sys/devices/system/node/NODE_ID/hugepages/hugepages-1048576kB/nr_hugepages</code>文件。</p></li><li><p><code>hugepagesz</code></p><p>定义引导时在内核中配置的持久页面大小。有效值为2MB和1GB。默认为2MB。</p><p><strong>例如，保留1GB页面</strong></p><p>HugeTLB子系统支持的页面大小取决于体系结构。在x86_64架构上，支持2MB大内存也和1GB大内存页。</p><ol><li><p>通过将以下行附加到内核命令 ，为1GB页面创建HugeTLB池：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_hugepagesz=1G hugepagesz=1G</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为<code>/usr/lib/systemd/system/hugetlb-gigantic-pages.service</code>，具体内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=HugeTLB Gigantic Pages Reservation</span><br><span class="line">DefaultDependencies=no</span><br><span class="line">Before=dev-hugepages.mount</span><br><span class="line">ConditionPathExists=/sys/devices/system/node</span><br><span class="line">ConditionKernelCommandLine=hugepagesz=1G</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/lib/systemd/hugetlb-reserve-pages.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=sysinit.target</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为<code>/usr/lib/systemd/hugetlb-reserve-pages.sh</code>具体内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">nodes_path=/sys/devices/system/node/</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$nodes_path</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ERROR: <span class="variable">$nodes_path</span> does not exist"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">reserve_pages()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> &gt; <span class="variable">$nodes_path</span>/<span class="variable">$2</span>/hugepages/hugepages-1048576kB/nr_hugepages</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reserve_pages NUMBER_OF_PAGES node</span><br></pre></td></tr></table></figure><p>将最后一行的<code>NUMBER_OF_PAGES</code>替换为要爆了的1GB页数，并将节点替换为要保留这些页的节点名称。</p></li><li><p>要在node0上保留两个1GB页面，在node1上保留一个1GB页，用以下代码替换最后一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reserve_pages 2 node0</span><br><span class="line">reserve_pages 1 node1</span><br></pre></td></tr></table></figure><p>可以根据需要对其进行修改，也可以添加更多行以在其他节点中保留。</p></li><li><p>使脚本执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/lib/systemd/hugetlb-reserve-pages.sh</span><br></pre></td></tr></table></figure></li><li><p>启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> hugetlb-gigantic-pages</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>可以随时通过写入nr_hugepages尝试在运行时保留更多1GB页面。但是，由于内存碎片，此类预留可能会失败。保留1GB页面的最可靠方法是使用此脚本，该脚本在早期启动时运行。</p></blockquote><h1 id="运行时配置大内存页"><a href="#运行时配置大内存页" class="headerlink" title="运行时配置大内存页"></a>运行时配置大内存页</h1><p>使用以下参数可以在运行时影响大型页：</p><p><code>/sys/devices/system/node/NODE_ID/hugepages/HUGEPAGES-SIZE/nr_hugepages</code>定义分配给指定NUMA节点的指定大内存页数，以下示例是将20个2048KB的大页移动到node2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numastat -cm | egrep <span class="string">'Node|Huge'</span></span><br><span class="line">                 Node 0 Node 1 Node 2 Node 3  Total add </span><br><span class="line">AnonHugePages         0      2      0      8     10</span><br><span class="line">HugePages_Total       0      0      0      0      0</span><br><span class="line">HugePages_Free        0      0      0      0      0</span><br><span class="line">HugePages_Surp        0      0      0      0      0</span><br><span class="line"><span class="built_in">echo</span> 20 &gt; /sys/devices/system/node/node2/hugepages/hugepages-2048kB/nr_hugepages </span><br><span class="line">numastat -cm | egrep <span class="string">'Node|Huge'</span></span><br><span class="line">                 Node 0 Node 1 Node 2 Node 3  Total</span><br><span class="line">AnonHugePages         0      2      0      8     10 </span><br><span class="line">HugePages_Total       0      0     40      0     40</span><br><span class="line">HugePages_Free        0      0     40      0     40</span><br><span class="line">HugePages_Surp        0      0      0      0      0</span><br></pre></td></tr></table></figure><p><code>/proc/sys/vm/nr_overcommit_hugepages</code>定义系统通过过度使用内存而异创建和使用的其他大内存页的最大数。将任何非零值写入此文件表示如果持久性大页池耗尽，系统将从内核的正常内存页池中湖区大量页面。当这些剩余的大内存页空闲时，他们将被释放会内核的正常页面池。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个两种方法可以保留大内存页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;at &lt;strong&gt;boot time&lt;/strong&gt;（启动时修改）&lt;/li&gt;
&lt;li&gt;at &lt;strong&gt;run time&lt;/strong&gt;（运行时修改）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 启动时保留会增加成功的可能性，因为内存尚未明显碎片化。但是在NUMA架构上，页面数量会自动在NUMA节点之间分配。运行时修改允许为每个NUMA节点保留大内存页。如果在引导过程中今早完成运行时预留，则内存碎片的可能性会降低。&lt;/p&gt;
&lt;h1 id=&quot;引导时配置大内存页&quot;&gt;&lt;a href=&quot;#引导时配置大内存页&quot; class=&quot;headerlink&quot; title=&quot;引导时配置大内存页&quot;&gt;&lt;/a&gt;引导时配置大内存页&lt;/h1&gt;&lt;p&gt;要在引导时配置大内存页，请将以下参数添加到内核引导命令行：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>转换检测缓冲区大小</title>
    <link href="https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/MEMORY/Conversion-detection-buffer-size/"/>
    <id>https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/MEMORY/Conversion-detection-buffer-size/</id>
    <published>2019-01-03T11:20:00.000Z</published>
    <updated>2020-01-22T12:57:45.930Z</updated>
    
    <content type="html"><![CDATA[<p>从页表中读取地址映射很耗时且资源宝贵，因此Linux操作系统提供最近使用地址的缓存：转换检测缓冲区（TLB）。但默认的TLB只能缓存一定量的的地址映射。如果需要的地址映射不存在TLB中（TLB miss），系统仍然需要读取页表以决定物理到虚拟的内存地址映射。</p><p>由于应用程序内存需求与用来缓存地址映射的页大小之间的关系，对于内存需求小的应用程序来说，对内存需求大的程序更容易受到TLB miss造成的性能下降。因此无论何时，避免TLB miss很重要。</p><p>部分Linux提供大型转换检测缓冲区（大型TLB），可以将内存分为大片段进行管理。这使大量的地址映射能同时进行缓存，降低TLB miss的可能性，提高需要大内存的应用程序的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从页表中读取地址映射很耗时且资源宝贵，因此Linux操作系统提供最近使用地址的缓存：转换检测缓冲区（TLB）。但默认的TLB只能缓存一定量的的地址映射。如果需要的地址映射不存在TLB中（TLB miss），系统仍然需要读取页表以决定物理到虚拟的内存地址映射。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>Tuned</title>
    <link href="https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/Tuned/"/>
    <id>https://www.sysctl.me/2019/01/03/Linux/Performance-tuning/Tuned/</id>
    <published>2019-01-03T11:10:00.000Z</published>
    <updated>2020-01-22T14:34:47.177Z</updated>
    
    <content type="html"><![CDATA[<p>Tuned是一个守护进程，用于<code>udev</code>监视连接的设备，并根据所选的配置文件静态和动态地调整系统设置。Tuned分布有许多预定义的配置文件，适用于高吞吐量，低延迟或<code>powersave</code>等常见用例。可以修改为每个配置文件定义的规则，并自定义如何调整特定设备。要还原特定配置文件对系统设置所做的所有更改，可以切换到另一个配置文件或停止<code>tuned</code>服务。</p><blockquote><p>Tuned 支持 <strong>Tuned in on-deamon mode</strong>，此模式下，<code>tuned</code>会应用设置并退出。要启用这种模式，在<code>/etc/tuned/tuned-main.conf</code>文件中设置<code>deamon = 0</code> 。</p></blockquote><p>静态调优主要包括预定义的<code>sysctl</code>和<code>sysfs</code>设置以及一些配置工具的一次性激活。<code>tuned</code>还根据监控信息动态监控系统组件的使用并调整系统设置。</p><p>动态调整考虑了在任何给定系统的整个正常运行时间内各种系统组件的使用方式不同。例如，阴干驱动器在启动和登录期间大量使用，但稍后再用户可能主要使用web浏览器或电子邮件客户端几乎不适用，类似地，CPU和网络设备在不同时间使用特点也不同。<code>tuned</code>监控这些组件的活动并对其使用的变化做出反应。</p><p>典型的，办公室工作站。大多数情况下，以太网网络接口不是很活跃。每隔一段时间只有少量的电子邮件进出，或者可能会加载一些网页。对于那些类型的负载，网络接口不必全速运行，就像默认情况下那样。<code>tuned</code>有一个用于网络设备的监控和调整插件，可以检测到这活动，然后自动降低网络速率，通常为了降低功耗。如果界面上的活动增减了很长一段时间。例如正在下载,<code>tuned</code>检测到这一点并将接口速率设置为最大，以便活动级别如此之高时提供最佳性能。此原则也用于CPU和硬盘的其他插件。</p><p>动态<code>tuned</code>默认是禁用的，可以更改<code>/etc/tuned/tuned-main.conf</code>文件中的<code>dynamic_tuning</code>为<code>1</code>来启用。<br><a id="more"></a></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p><code>tuned</code>使用两种类型的插件：<em>tuning plugins</em>和,<em>monitoring plugins</em>,目前有一下monitoring plugins：</p><ul><li><p>disk</p><p>获取每个设备的磁盘负载（IO操作数）和测量间隔。</p></li><li><p>net</p><p>获取每个网卡的网络负载（传输的数据包数）和测量间隔。</p></li><li><p>load</p><p>获取每个CPU的CPU负载和测量间隔。</p></li></ul><p>可能通<em>tuning plugins</em>进行动态调整来使用<em>monitoring plugins</em>的输出。当前实现的动态调整算法尝试平衡性能和<code>powersave</code>,因此在性能配置文件中被禁用（可以在<code>tuned</code>配置文件中启用或禁用各个插件的动态调整）。只要任何启用的调优插件需要其指标，<em>monitoring plugins</em>就会自动实例化，如果两个<em>tuning plugins</em>需要相同的数据，则只创建一个<em>monitoring plugins</em>实例并共享数据。</p><p>每个<em>tuning plugins</em>都会调整单个子系统，并从<strong>调整后的</strong>配置文件中获取几个参数。每个子系统可以具有多个设备（例如，多个CPU或网卡），这些设备由<em>tuning plugins</em>的各个实例处理。还支持各个设备的特定设置。提供的配置文件使用通配符来匹配各个子系统的所有设备，这允许插件根据所需膜表调整这些子系统（选定的配置文件）并且用户唯一需要做的就是选择正确的<code>tuned</code>配置文件。</p><p>目前，实现了以下<em>tuning plugins</em>：</p><p><strong>cpu</strong></p><p>​    将CPU调度器设置为<code>governor</code>参数指定的值，并根据CPU负载动态更改PM Qos CPU DMA延迟。如果CPU负载低于<em>load_threshold</em>参数指定的值，则将latency设置为<em>latency_high</em>参数指定的值，否则将其设置为<em>latency_low</em>指定的值。侧歪，可以将延迟强制为特定值，而无需进一步动态更改。这可以通过将<em>force_latency</em>参数设置为所需的延迟值来实现。</p><p><strong>eeepc_she</strong></p><p>​    根据CPU负载情况动态设置FSB速度；一般不需要配置，如果CPU负载低于或等于<code>load_threshold_powersave</code>参数指定的值，则插件将FSB速度设置为参数指定的值。</p><p><strong>net</strong></p><p>​    将<code>wake-on-lan</code>配置为<code>wake_on_lan</code>参数指定的值。还根据接口利用率动态改变接口速率。</p><p><strong>sysctl</strong></p><p>​    设置<code>sysctl</code>插件参数指定的各种设置。语法为<code>name = value</code>，其中<code>name</code>与<code>sysctl</code>工具提供的名称相同。如果需要更改其他插件未涵盖的设置，请使用此插件。</p><p><strong>usb</strong></p><p>​    将USB设备的自动暂停超时设置为<code>autosuspend</code>参数指定的值。0表示禁用自动挂起。</p><p><strong>audio</strong></p><p>​    将音频解码器的自动暂停超时设置为<code>timeout</code>参数指定的值。目前<code>snd_hda_intel</code>和<code>snd_ac97_aodec</code>得到支持。该值为0表示禁用自动暂停。</p><p><strong>disk</strong></p><p>将电梯设置为<em>elevator</em>参数指定的值。它还将ALPM设置为参数指定的值<em>alpm</em>，ASPM为参数指定的值<em>aspm</em>，scheduler quantum为<em>scheduler_quantum</em>参数指定的值，disk spindown timeout为<em>spindown</em>参数指定的值，disk readahead为指定的值<em>readahead</em>参数，可以将当前磁盘预读值乘以<em>readahead_multiply</em>参数指定的常量。此外，此插件根据当前驱动器利用率动态更改驱动器的高级电源管理和spindown超时设置。动态调整可以通过布尔参数控制<em>dynamic</em>，默认情况下启用。</p><p><strong>mounts</strong></p><p>根据<em>disable_barriers</em>参数的布尔值启用或禁用装载障碍。</p><p><strong>script</strong></p><p>此插件可用于执行在加载或卸载配置文件时运行的外部脚本。该脚本由一个参数调用，该参数可以是<code>start</code>或<code>stop</code>（它取决于在配置文件加载或卸载期间是否调用脚本）。脚本文件名可以由<em>script</em>参数指定。请注意，您需要在脚本中正确实现停止操作并恢复在启动操作期间更改的所有设置，否则回滚将不起作用。为了您的方便，<code>functions</code>默认情况下安装Bash帮助程序脚本，允许您导入和使用其中定义的各种函数。请注意，此功能主要是为了向后兼容性而提供的，建议您将其用作最后的手段，如果它们涵盖了所需的设置，则更喜欢其他插件。</p><p><strong>sysfs</strong></p><p>设置<code>sysfs</code>插件参数指定的各种设置。语法是<code>name</code>= <code>value</code>，其中<code>name</code>是<code>sysfs</code>要使用的路径。如果您需要更改其他插件未涵盖的某些设置，请使用此插件（如果它们涵盖了所需的设置，请选择特定的插件）。</p><p><strong>video</strong></p><p>在视频卡上设置各种powersave级别（目前仅支持Radeon卡）。可以使用<em>radeon_powersave</em>参数指定powersave级别。支持的值是：<code>default</code>，<code>auto</code>，<code>low</code>，<code>mid</code>，<code>high</code>，和<code>dynpm</code>。</p><p>bootloader</p><p>将参数添加到内核引导命令行。此插件支持旧版GRUB 1，GRUB 2以及带可扩展固件接口（EFI）的GRUB。可以通过<em>grub2_cfg_file</em>选项指定grub2配置文件的自定义非标准位置。参数将添加到当前grub配置及其模板中。需要重新启动计算机才能使内核参数生效。</p><p>可以通过以下语法指定参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdline= arg 1 arg 2 ... arg n。</span><br></pre></td></tr></table></figure><h1 id="安装及其使用"><a href="#安装及其使用" class="headerlink" title="安装及其使用"></a>安装及其使用</h1><p>要安装tuned， 运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tuned</span><br></pre></td></tr></table></figure><p><code>tuned</code>包还预设了最合适系统的配置文件。目前根据以下可自定义规则选择默认配置文件：</p><p><code>throughput-performance</code></p><p>​    这是在充当计算节点操作系统上预先选择的。此类型目标是最佳吞吐量性能。</p><p><code>virtual-guest</code></p><p>​    这是在虚拟机上预先选择的。目标是最佳表现。如果对性能不感兴趣，可以希望将其修改为<code>balanced</code>或<code>powersave</code>配置文件。</p><p><code>balanced</code></p><p>​    这是在所有其他情况下预先选择的。目标是平衡性能和功耗。</p><p>要启动<code>tuned</code>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start tuned</span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> tuned</span><br></pre></td></tr></table></figure><p><code>tuned</code>控制。例如选择配置文件和其他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm</span><br></pre></td></tr></table></figure><p>此命令要求<code>tuned</code>服务在运行。</p><p>要查看可用的已安装配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm list</span><br></pre></td></tr></table></figure><p>要查看当前激活的配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm active</span><br></pre></td></tr></table></figure><p>要选择或激活配置文件,运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm profile profile</span><br></pre></td></tr></table></figure><p>可以一次选择多个配置文件。应用程序将尝试在装载过程中合并他们，如果存在冲突，则最后指定的配置文件中的设置优先。这是自动完成的，下面示例优化系统以便在虚拟机中获得最佳性能，并同事针对低功耗进行调整，低功耗作为优先级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm prfile virtual-guest powersave</span><br></pre></td></tr></table></figure><p>要让<code>tuned</code>建议您为系统选择最合适的配置文件，而不更改任何现有配置文件并使用安装期间使用的相同逻辑，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm recommend</span><br></pre></td></tr></table></figure><h1 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h1><p>特定于分发的配置文件存储在<code>/usr/lib/tuned/</code>目录中。每个配置文件都有自己的目录。该配置文件由调用的主配置文件<code>tuned.conf</code>和可选的其他文件组成，例如帮助程序脚本。</p><p>如果需要自定义配置文件，请将配置文件目录复制到<code>/etc/tuned/</code>用于自定义配置文件的目录中。如果有两个相同名称的配置文件，则使用包含在<code>/etc/tuned/</code>其中的配置文件。</p><p>还可以在<code>/etc/tuned/</code>目录中创建的配置文件，已使用<code>/usr/lib/tuned/</code>中包含的配置文件，仅调整或覆盖某些参数。</p><p><code>tuned.conf</code>文件包含几个部分。有一个<code>[mian]</code>部分。其他部分是插件实例的配置。所有部分都是可选的，包括<code>[mian]</code>部分。以<code>#</code>开头是行的注释。</p><p><code>[main]</code>部分 有以下选项：</p><p><code>include-profile</code></p><p>​    将包括指定的配置文件，例如<code>include=powersave</code>将包括<code>powersave</code>配置文件。</p><blockquote><p>藐视插件实例的部分按以下方法格式化：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[NAME]</span><br><span class="line"><span class="built_in">type</span>=TYPE</span><br><span class="line">decices=DEVICES</span><br></pre></td></tr></table></figure><p><code>NAME</code>是日志中使用的插件实例名称。它可以是任意字符串。<code>TYPE</code>是插件类型。<code>DEVICES</code>是此插件实例将处理的设备列表。<code>devices</code>行可以包含列表，通配符和否定。您还可以组织规则。如果没有<code>decices</code>行，则系统中存在或稍后附加的所有设备<code>TYPE</code>将由插件实例处理。如果未配置插件的实例，则不会启用插件，如果插件支持更多选项，可以在插件部分指定它们。如果未指定该选项，则将使用默认值。</p><p><strong>描述实例</strong></p><p>以下示例将匹配<code>sd</code>开头的内容，例如<code>sda</code>或<code>sdb</code>,并且不会禁它们的障碍：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[data_disk]</span><br><span class="line"><span class="built_in">type</span>=disk</span><br><span class="line">devices=sd*</span><br><span class="line">disable_barriers=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>以下示例将匹配除<code>sda1</code>和<code>sda2</code>之外的所有内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[data_disk]</span><br><span class="line"><span class="built_in">type</span>=disk</span><br><span class="line">devices=!sda1. !sda2</span><br><span class="line">disable_barriers=<span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不需要插件实例的自定义命名，并且配置文件中只有一个实例定义，Tuned支持以下简短语法：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[TYPE]</span><br><span class="line">devices=DEVICES</span><br></pre></td></tr></table></figure><p>在这种情况下，可以省略<code>TYPE</code>行，然后将使用与类型相同的名称引用该实例。之前的示例可以重写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[disk]</span><br><span class="line">devices=sdb*</span><br><span class="line">disable_barriers=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如果使用<code>include</code>选项多次指定相同的部分，则合并设置。如果由于冲突中的先前设置。有时，不知道之前定义的是什么，在这种情况下，可以设置<code>replace</code>为<code>true</code>.这将导致所有以前具有相同名称的定义被覆盖，而且不会发生合并。</p><p>您还可以通过指定<code>enabled=false</code>选项来禁用插件。这与从未定义实例的效果相同。如果要从<code>include</code>选项重新定义先前的定义并且不希望插件在自定义配置文件中处于活动状态，则禁用该插件会很有用。</p><p>以下是基于balance配置文件的自定义配置文件示例，并将其拓展为将所有设备的ALPM设置为最大省电方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">include=balanced</span><br><span class="line"></span><br><span class="line">[disk]</span><br><span class="line">alpm=min_power</span><br></pre></td></tr></table></figure><p>以下是将<code>isolcpus=2</code>添加到内核引导命令行的自定义配置文件的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[bootloader]</span><br><span class="line">cmdline=isolcpus=2</span><br></pre></td></tr></table></figure><p>应用配置文件后，需要重新启动计算机才能使更改生效。</p><h1 id="Tuned-adm"><a href="#Tuned-adm" class="headerlink" title="Tuned-adm"></a>Tuned-adm</h1><p>对系统的详细分析可能非常耗时，默认包含许多典型用例的预定义的配置文件，可以使用<code>tuned-adm</code>程序轻松激活这些配置文件，还可以创建，修改和删除配置文件。</p><p>要列出所有可用的配置文件并标识当前活动配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm list</span><br></pre></td></tr></table></figure><p>要仅显示当前活动的配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm active</span><br></pre></td></tr></table></figure><p>要切换到其中一个可用的配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm profile PROFILE_NAME</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm profile latency-performance</span><br></pre></td></tr></table></figure><p>要禁用所有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm off</span><br></pre></td></tr></table></figure><p>以下是默认的预置的配置文件列表：</p><div class="table-container"><table><thead><tr><th>配置文件</th><th>描述</th></tr></thead><tbody><tr><td><code>balanced</code></td><td>默认节能配置文件。旨在成为性能和功耗之间的折衷。尽可能尝试使用自动缩放和自动调整。对大多数负载都有很好的效果。唯一的缺点是延迟增加。</td></tr><tr><td><code>powersave</code></td><td>最佳节能配置文件。可以牺牲性能以最小化实际功耗。在当前的<code>tuned</code>版本中，它可以在<code>SATA</code>主机适配实现USB自动挂起等省电方式。</td></tr><tr><td><code>throughput-performance</code></td><td>针对高吞吐量优化的服务器配置文件它禁用节能机制并启用<code>sysctl</code>设置，提高磁盘，网络I/O的吞吐量性能并切换到<code>deadline</code>调度程序。CPU调控器为<code>performance</code>。</td></tr><tr><td><code>latency-performance</code></td><td>针对低延迟优化服务器配置文件。它禁用省电机制并启用<code>sysctl</code>设置以改善延迟。CPU调控器设置为<code>performance</code>并且CPU锁定到低C状态。</td></tr><tr><td><code>network-latency</code></td><td>用于低延迟网络的配置文件。基于<code>latency-performance</code>设置，禁用透明大页面，NUMA平衡和调整其他几个网络相关的<code>sysctl</code>参数。</td></tr><tr><td><code>network-throughput</code></td><td>吞吐量网络的配置文件，基于<code>throughput-performance</code>，增加了内核网络缓冲区。</td></tr><tr><td><code>virtual-guest</code></td><td>基于<code>enterprise-storage</code>配置文件，除其他任务外，还可减少虚拟内存并增加磁盘预读值。不会禁用磁盘障碍。</td></tr><tr><td><code>virtual-host</code></td><td>基于<code>enterprise-storage</code>配置文件，减少虚拟内存吞吐量，增加磁盘预读值并启用更强大的脏页值。</td></tr><tr><td><code>oracle</code></td><td>基于<code>throughput-performance</code>配置文件，针对oracle数据库优化，禁用透明的大页面并修改其他一些与性能相关的内核参数。</td></tr><tr><td><code>desktop</code></td><td>基于<code>balanced</code>配置文件。还支持调度程序自动组，以便更高的相应交互式程序。</td></tr><tr><td><code>default</code></td><td>只启动CPU和磁盘插件。</td></tr><tr><td><code>desktop-powesave</code></td><td>针对桌面系统的节能配置文件。</td></tr><tr><td><code>lapto-ac-powersave</code></td><td>针对运行AC的笔记本电脑节能配置文件。</td></tr><tr><td><code>lapto-battery-powersave</code></td><td>针对笔记本节能配置文件。</td></tr><tr><td><code>spindown-disk</code></td><td>经典HDD的机器的节能配置文件，最大限度地延长spindown时间。禁用省电机制，禁用USB自动挂起，禁用蓝牙，启用WiFi省电，禁用日志同步，增加磁盘回写时间，降低磁盘刷新，使用<code>noatime</code>选项重新挂载所有分区。</td></tr><tr><td><code>enterprise-storage</code></td><td>针对企业级存储的服务器配置文件，最大化I/O吞吐量，禁用非root和非引导分区上的障碍。</td></tr></tbody></table></div><h1 id="powertop2tuned"><a href="#powertop2tuned" class="headerlink" title="powertop2tuned"></a>powertop2tuned</h1><p><code>powertop2tuned</code>是一个实用程序，允许从<code>PowerTOP</code>建议创建自定义<code>tuned</code>配置文件。</p><p>要安装请运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tuned-utils</span><br></pre></td></tr></table></figure><p>创建一个自定义配置文件，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powertop2tuned NEW_PROFILE_NAME</span><br></pre></td></tr></table></figure><p>默认情况下，它会在<code>/etc/tuned</code>目录中创建配置文件，并将其基于当前选定的配置文件。出于安全原因，最初在新配置文件中禁用所有<code>PowerTOP</code>调整，要使他们能够在<code>/etc/tuned/profile/tuned.conf</code>中取消对您感兴趣的调整。可以使用<code>--enable</code> 或者<code>-e</code>选项生成新的配置文件，其中包含启用<code>PowerTOP</code>建议的大多数调整。一些危险和调整，如USB自动暂停仍将被禁用。如果确实需要它们，必须手动取消注释。默认情况下，不会激活新的配置文件，要激活请运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuned-adm profile NEW_PROFILE_NAME</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tuned是一个守护进程，用于&lt;code&gt;udev&lt;/code&gt;监视连接的设备，并根据所选的配置文件静态和动态地调整系统设置。Tuned分布有许多预定义的配置文件，适用于高吞吐量，低延迟或&lt;code&gt;powersave&lt;/code&gt;等常见用例。可以修改为每个配置文件定义的规则，并自定义如何调整特定设备。要还原特定配置文件对系统设置所做的所有更改，可以切换到另一个配置文件或停止&lt;code&gt;tuned&lt;/code&gt;服务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tuned 支持 &lt;strong&gt;Tuned in on-deamon mode&lt;/strong&gt;，此模式下，&lt;code&gt;tuned&lt;/code&gt;会应用设置并退出。要启用这种模式，在&lt;code&gt;/etc/tuned/tuned-main.conf&lt;/code&gt;文件中设置&lt;code&gt;deamon = 0&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;静态调优主要包括预定义的&lt;code&gt;sysctl&lt;/code&gt;和&lt;code&gt;sysfs&lt;/code&gt;设置以及一些配置工具的一次性激活。&lt;code&gt;tuned&lt;/code&gt;还根据监控信息动态监控系统组件的使用并调整系统设置。&lt;/p&gt;
&lt;p&gt;动态调整考虑了在任何给定系统的整个正常运行时间内各种系统组件的使用方式不同。例如，阴干驱动器在启动和登录期间大量使用，但稍后再用户可能主要使用web浏览器或电子邮件客户端几乎不适用，类似地，CPU和网络设备在不同时间使用特点也不同。&lt;code&gt;tuned&lt;/code&gt;监控这些组件的活动并对其使用的变化做出反应。&lt;/p&gt;
&lt;p&gt;典型的，办公室工作站。大多数情况下，以太网网络接口不是很活跃。每隔一段时间只有少量的电子邮件进出，或者可能会加载一些网页。对于那些类型的负载，网络接口不必全速运行，就像默认情况下那样。&lt;code&gt;tuned&lt;/code&gt;有一个用于网络设备的监控和调整插件，可以检测到这活动，然后自动降低网络速率，通常为了降低功耗。如果界面上的活动增减了很长一段时间。例如正在下载,&lt;code&gt;tuned&lt;/code&gt;检测到这一点并将接口速率设置为最大，以便活动级别如此之高时提供最佳性能。此原则也用于CPU和硬盘的其他插件。&lt;/p&gt;
&lt;p&gt;动态&lt;code&gt;tuned&lt;/code&gt;默认是禁用的，可以更改&lt;code&gt;/etc/tuned/tuned-main.conf&lt;/code&gt;文件中的&lt;code&gt;dynamic_tuning&lt;/code&gt;为&lt;code&gt;1&lt;/code&gt;来启用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="Tools" scheme="https://www.sysctl.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>内存页大小</title>
    <link href="https://www.sysctl.me/2019/01/02/Linux/Performance-tuning/MEMORY/Memory-page-size/"/>
    <id>https://www.sysctl.me/2019/01/02/Linux/Performance-tuning/MEMORY/Memory-page-size/</id>
    <published>2019-01-02T01:10:00.000Z</published>
    <updated>2020-01-22T12:57:46.607Z</updated>
    
    <content type="html"><![CDATA[<p>物理内存管理区块称为页，每个页的物理位置都映射到一个虚拟位置以便处理器能够访问内存。这种映射存储于一个叫做页表的数据结构中。</p><p>默认情况下，一个页4KB，由于页的默认大小非常小，因此需要很多页来管理大量的内存。但是，页表只能存储有限的地址映射，增加其存储地址映射的数量既昂贵又困难，因为要考虑到将性能保护顶级保持在内存需求的范围内。</p><p>Linux通过静态大型页来给每个页管理大内存的能力。静态大型分页可以配置到1GB大小。但是很难对其进行手动管理，必须在启动时就分配好。</p><p>透明大分页很大程度上使之余静态大页面的一个自动选择。透明大型页大小为2MB且默认启动。它们有时会干扰对延迟敏感的应用，因此常常在延迟严重时被禁用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;物理内存管理区块称为页，每个页的物理位置都映射到一个虚拟位置以便处理器能够访问内存。这种映射存储于一个叫做页表的数据结构中。&lt;/p&gt;
&lt;p&gt;默认情况下，一个页4KB，由于页的默认大小非常小，因此需要很多页来管理大量的内存。但是，页表只能存储有限的地址映射，增加其存储地址映射
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>监控和诊断性能问题</title>
    <link href="https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/MEMORY/Monitor-and-diagnose-memory-performance-issues/"/>
    <id>https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/MEMORY/Monitor-and-diagnose-memory-performance-issues/</id>
    <published>2019-01-01T11:10:00.000Z</published>
    <updated>2020-01-22T14:34:33.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用vmstat监控内存使用量"><a href="#使用vmstat监控内存使用量" class="headerlink" title="使用vmstat监控内存使用量"></a>使用vmstat监控内存使用量</h1><p><code>vmstat</code>由procps-ng包提供。</p><p>以下命令显示各种事件计数器和内存统计的表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat -s</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="使用Valgrind分析应用程序的内存使用情况"><a href="#使用Valgrind分析应用程序的内存使用情况" class="headerlink" title="使用Valgrind分析应用程序的内存使用情况"></a>使用Valgrind分析应用程序的内存使用情况</h1><p><code>valgrind</code>是一个为用户空间二进制文件提供检测的框架。附带了许多工具，用于分析程序的性能：</p><p>要使用<code>valgrind</code>请安装<code>balgrind</code>软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install valgrind</span><br></pre></td></tr></table></figure><h2 id="使用memcheck分析内存使用情况"><a href="#使用memcheck分析内存使用情况" class="headerlink" title="使用memcheck分析内存使用情况"></a>使用memcheck分析内存使用情况</h2><p><code>memcheck</code>是默认的<code>valgrind</code>工具。可以检测并报告许多难以检测和诊断的内存错误，例如：</p><ul><li>不应发生的内存访问</li><li>未定义或未初始化的值使用</li><li>错误地释放堆内存</li><li>指针重置</li><li>内存泄露</li></ul><p>由于<code>memcheck</code>使用检测，因此使用<code>memcheck</code>执行的应用程序比平时慢十倍到三十倍。</p><p>要在应用程序运行<code>memcheck</code>，执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind --tool=mecheck APPLICATION</span><br></pre></td></tr></table></figure><p>还可以使用以下选项将<code>memcheck</code>输出集中在特定类型的问题上。</p><ul><li><p><code>--leak-check</code></p><p>应用程序完成启动后，<code>memcheck</code>会搜索内存泄露。默认值为<code>--leak-check=summary</code>.它打印出发现的内存泄露次数，可以指定<code>--leak-check=yes</code>或<code>--leak-check=full</code>来输出每个泄露的详细信息。要禁用，请指定<code>--leak-check=no</code>。</p></li><li><p><code>--undef-value-errors</code></p><p>默认值为<code>--undef-value-errors=yes</code>,当未使用自定义的值时报告错误，还可以指定<code>--undef-value-error=no</code>，这将禁用此报告，加快<code>memcheck</code>。</p></li><li><p><code>--ignore-ranges</code></p><p>指定<code>memcheck</code>在检查内存寻址能力时忽略一个或多个范围，例如，<code>--ignore-ranges=0xPP-0xQQ,0xRR-0xSS</code>。</p></li></ul><h2 id="使用chchegrind分析缓存使用情况"><a href="#使用chchegrind分析缓存使用情况" class="headerlink" title="使用chchegrind分析缓存使用情况"></a>使用chchegrind分析缓存使用情况</h2><p><code>cachegrind</code>模拟应用程序与系统缓存层次结构和分支预测期器的交互。它跟踪模拟的第一级指令和数据告诉缓存的使用，以检测与此级别告诉缓存的不良代码交互，它还跟踪最后一级缓存（二级或三级）以跟踪内存访问。因此，使用<code>cachegrind</code>应用程序比平时慢了20到100倍。</p><p><code>cachegrind</code>手机应用程序执行期间的统计信息，并将摘要输出到控制台。要在程序上运行<code>cachegrid</code>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vaglrind --tool = cachegrind  APPLICATION</span><br></pre></td></tr></table></figure><p>还可以使用以下选项将<code>cachegrind</code>输出聚焦到特定问题。</p><ul><li><p><code>--I1</code></p><p>指定第一级指令高速缓存的大小，关联性和行大小，就像这样：<code>--I1=SIZE,ASSOCIATIVITY,LINE_SIZE</code>。</p></li><li><p><code>--D1</code> </p><p>指定第一级数据高速缓存的大小，关联性和行大小，就像这样：<code>--D1=SIZE,ASSOCIATIVITY,LINE_SIZE</code>。</p></li><li><p><code>--LL</code></p><p>指定最后一级缓存的大小，关联性和行大小，就像这样：<code>--LL=SIZE,ASSOCIATIVITY,LINE_SIZE</code>。</p></li><li><p><code>--cache-sim</code></p><p>启用或禁用缓存访问和未命中计数。默认情况下是启用（<code>–cache-sim=yes</code>）。禁用会使<code>cachegrind</code>无法收集信息。</p></li><li><p><code>--branch-sim</code></p><p>启用或禁用分支指令的集合和不正确的预测计数。默认情况启用此选项。禁用会使<code>cachegrind</code>无法收集信息。</p></li></ul><p><code>cachegrind</code>将详细的分析信息写入每个进程的<code>cachegrind.out.pid</code>文件，其中<code>pid</code>是进程标识符。这个相信信息可以由配套<code>cg_annotate</code>工具进一步处理，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cg_annotate cachegrind.out.pid</span><br></pre></td></tr></table></figure><p><code>cachegrind</code>还提供了cg_diff工具，可以更轻松地在代码更改之前和之后绘制性能。要比较输出文件，执行以下命令，先用初始配置文件输出文件替换，然后再用后续配置文件输出文件替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cg_diff FIRST SECOND</span><br></pre></td></tr></table></figure><p>使用<code>cg_annotate</code>工具可以更详细地查看输出文件。</p><h2 id="使用massif分析堆和堆栈空间"><a href="#使用massif分析堆和堆栈空间" class="headerlink" title="使用massif分析堆和堆栈空间"></a>使用massif分析堆和堆栈空间</h2><p><code>massif</code>测量指定应用程序使用的堆空间。可以测量有用的空间以及额外用来记录和校准的空间，<code>massif</code>有助于了解减少应用程序内存使用的方法，以便提高运行速度，减少应用程序耗尽系统交换空间的可能性。使用<code>massif</code>执行的应用程序运行起来比平时慢20倍左右。</p><p>要在一个应用程序中运行massif ，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind --tool=massif APPLICATION</span><br></pre></td></tr></table></figure><p>用户也可以使用以下选项来将<code>massif</code>的输出集中在一个特定问题上。</p><ul><li><p><code>--heap</code></p><p>设定<code>massif</code>是否分析堆。默认值为<code>--heap=yes</code>。要禁用堆分析设置为<code>--heap=no</code>。</p></li><li><p><code>--heap-admin</code></p><p>堆分析启用时要设定每个用于管理的数据块字节数。默认为8字节。</p></li><li><p><code>--stacks</code></p><p>设置<code>massif</code>是否分析堆。默认为<code>--stack=no</code>由于堆分析会减缓<code>massif</code>将这一选项设置为<code>--stack=yes</code>来启用。注意，<code>massif</code>会假设主要的堆始于零值，这是为了更好地显示与所分析的应用程序相关的堆尺寸的变化。</p></li><li><p><code>--time-unit</code></p><p>设定<code>massif</code>收集分析数据的间隔。默认为<code>i</code> （执行指令）。用户也可以指定<code>ms</code></p><p>(毫秒)和<code>B</code>（分配或回收的堆栈字节数）。检查分配的字节数有利于短期运行程序测试，因为对于不同硬件，它是最具重复性的。</p></li></ul><p><code>massif</code>将分析数据输出至<code>massif.out.pid</code>文件，该文件中的<code>pid</code>是指定应用程序的进程标识符。<code>ms_print</code>工具将此分析数据汇成图片，以此显示执行应用程序的内存消耗，也包括峰值内存分配点负责分配的站点详情。要绘制<code>massif.out.pid</code>文件的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms_print massif.out.pid</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用vmstat监控内存使用量&quot;&gt;&lt;a href=&quot;#使用vmstat监控内存使用量&quot; class=&quot;headerlink&quot; title=&quot;使用vmstat监控内存使用量&quot;&gt;&lt;/a&gt;使用vmstat监控内存使用量&lt;/h1&gt;&lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt;由procps-ng包提供。&lt;/p&gt;
&lt;p&gt;以下命令显示各种事件计数器和内存统计的表。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vmstat -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>Tuna</title>
    <link href="https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/Tuna/"/>
    <id>https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/Tuna/</id>
    <published>2019-01-01T01:10:00.000Z</published>
    <updated>2020-01-22T14:34:42.898Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用<code>tuna</code>程序调整调度程序可调参数，调整线程优先级，<code>IRQ</code>处理程序以及隔离CPU核心和套接字，<code>tuna</code>旨在降低执行调优任务的复杂性。</p><h1 id="用tuna查看系统"><a href="#用tuna查看系统" class="headerlink" title="用tuna查看系统"></a>用tuna查看系统</h1><p>可以使用<code>tuna</code>显示系统当前正在发生的情况。</p><p>查看当前的策略和优先事项，使用<code>tuna --show_threads</code>命令：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tuna --show_threads</span><br><span class="line">                      线程       ctxt_switches</span><br><span class="line">  pid   SCHED_   rtpri affinity voluntary nonvoluntary           cmd</span><br><span class="line">  1      OTHER     0      0,1      1741         1927         systemd</span><br><span class="line">  2      OTHER     0      0,1       162            0        kthreadd</span><br><span class="line">  3      OTHER     0        0      1372            0     ksoftirqd/0</span><br><span class="line">  5      OTHER     0        0         8            0    kworker/0:0H</span><br><span class="line">  6      OTHER     0      0,1       136            0  kworker/u256:0</span><br><span class="line">  7       FIFO    99        0       329            0     migration/0</span><br><span class="line">  8      OTHER     0      0,1         2            0          rcu_bh</span><br><span class="line">  9      OTHER     0      0,1     21314            0       rcu_sched</span><br><span class="line">  10      FIFO    99        0      2132            0      watchdog/0</span><br><span class="line">  11      FIFO    99        1      2132            0      watchdog/1</span><br><span class="line">  12      FIFO    99        1       279            0     migration/1</span><br><span class="line">  13     OTHER     0        1       786            0     ksoftirqd/1</span><br><span class="line">  15     OTHER     0        1        11            0    kworker/1:0H</span><br><span class="line">  17     OTHER     0      0,1       162            0       kdevtmpfs</span><br><span class="line">  18     OTHER     0      0,1         2            0           netns</span><br><span class="line">  19     OTHER     0      0,1        72            0      khungtaskd</span><br><span class="line">  20     OTHER     0      0,1         2            0       writeback</span><br></pre></td></tr></table></figure></p><p>想要仅显示与PID对应的特定线程或匹配命令名称，在<code>--show_threads</code>之前添加<code>--threads</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --threads=PID_OR_CMD_LIST --show_threads</span><br></pre></td></tr></table></figure><p>查看当前中断请求（IRQ）及其相关性，使用<code>tuna --show_irqs</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --show_irqs</span><br></pre></td></tr></table></figure><p>仅显示与IRQ编号对应的特定中断请求或匹配IRQ用户名，在<code>--show_irqs</code>之前添加<code>--irqs</code>选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --irqs=NUMBER_OR_USER_LIST --show_irqs</span><br></pre></td></tr></table></figure><h1 id="使用tuna调整CPU"><a href="#使用tuna调整CPU" class="headerlink" title="使用tuna调整CPU"></a>使用tuna调整CPU</h1><p><code>tuna</code>命令可以针对单个CPU，要列出系统上的CPU，<code>/proc/cpuinfo</code>文件可以获取详细信息。</p><p>要指定受命令影响的CPU列表，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --cpus=CPU_LIST --COMMAND</span><br></pre></td></tr></table></figure><p>隔离CPU会导致当前该CPU上运行的所有任务移动到下一个可用的CPU。要隔离CPU，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --cpus=CPU_LIST --isolate</span><br></pre></td></tr></table></figure><p>包含CPU允许线程在指定的CPU上运行。要包含CPU，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --cpu=CPU_LIST --include</span><br></pre></td></tr></table></figure><p><code>CPU_LIST</code>参数是逗号分隔的CPU编号列表。例如，<code>--cpus=0,2</code>。</p><h1 id="使用tuna调整IRQS"><a href="#使用tuna调整IRQS" class="headerlink" title="使用tuna调整IRQS"></a>使用tuna调整IRQS</h1><p>要查看系统上当前运行的IRQ列表，查看<code>/proc/interrpupts</code>文件。也可以使用<code>tuna --show_irqs</code>命令。</p><p>要指定受命令影响的IRQ列表，使用<code>–irqs</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --irqs=IRQ_LIST --COMMAND</span><br></pre></td></tr></table></figure><p>要将终端移动到指定的CPU，请使用<code>--move</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --irqs=IRQ_LIST --cpus=CPU_LIST --move</span><br></pre></td></tr></table></figure><p><code>IRQ_LIST</code>参数是逗号分隔的<code>IRQ</code>编号或用户名模式的列表。</p><p><code>CPU_LIST</code>参数是逗号分隔的CPU编号列表。例如，<code>--cpus=0,2</code>。</p><p>例如，要定位名称以<code>sfc1</code>开头的所有的中断，并将他们分布在两个CPU：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --irqs=sfc1\* --cpus=7,8 --move --spread</span><br></pre></td></tr></table></figure><p>要验证设置，使用<code>--move</code>参数修改<code>IRQ</code>之前和之后使用<code>-show_irqs</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuna --irqs=128 --show_irqs</span><br><span class="line">tuna --irqs=128 --cpus=3 --move</span><br><span class="line">tuna --irqs=128 --show_irqs</span><br></pre></td></tr></table></figure><p>可以比较出更改前后<code>IRQ</code>的状态。</p><h1 id="使用tuna调整任务"><a href="#使用tuna调整任务" class="headerlink" title="使用tuna调整任务"></a>使用tuna调整任务</h1><p>要更改线程的策略和优先级信息，使用<code>--priority</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --rhreads=PID_OR_CMD_LIST --priority=[POLICY:]RT_PRIORITY</span><br></pre></td></tr></table></figure><ul><li><em>PID_OR_CMD_LIST</em>是逗号分隔的PID或命令名模式的列表。</li><li>对于默认策略，将策略设置为<strong>RR</strong>（roind-robin），<strong>FIFO</strong>（first in ， first out）或者<strong>OTHER</strong>。</li><li>将RT_PRIORITY设置为范围1-99。1是最低优先级，99是最高优先级。</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --threads=7861 --priority=RR:40</span><br></pre></td></tr></table></figure><p>要验证设置的更改，请在修改<code>--proprity</code>之前和之后使用<code>--show_threads</code>参数查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --rhreads=sshd --show_threads --priority=RR:40 --show_threads</span><br></pre></td></tr></table></figure><p>这允许比较更改之前和之后所选线程的状态。</p><h1 id="tuna配置示例"><a href="#tuna配置示例" class="headerlink" title="tuna配置示例"></a>tuna配置示例</h1><p><strong>将任务分配给特定CPU</strong></p><p>以下示例使用具有四个或更多处理器的系统，并显示如何使所有<code>ssh</code>线程在CPU 0和1以及<code>http</code>CPU 2和3上的所有线程上运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuna --cpus=0,1 --threads=ssh\* --move --cpus=2,3 --threads=http\* --move</span><br></pre></td></tr></table></figure><p>上面的示例命令按顺序执行以下操作：</p><ol><li>Select CPUs 0 and 1.</li><li>Select all threads that begin with <code>ssh</code>.</li><li>Move the selected threads to the selected CPUs. Tuna sets the affinity mask of threads starting with <code>ssh</code> to the appropriate CPUs. The CPUs can be expressed numerically as 0 and 1, in hex mask as <code>0x3</code>, or in binary as <code>11</code>.</li><li>Reset the CPU list to 2 and 3.</li><li>Select all threads that begin with <code>http</code>.</li><li>Move the selected threads to the selected CPUs. Tuna sets the affinity mask of threads starting with <code>http</code> to the appropriate CPUs. The CPUs can be expressed numerically as 2 and 3, in hex mask as <code>0xC</code>, or in binary as <code>1100</code>.</li></ol><p><strong>查看当前配置</strong></p><p>以下示例使用<code>--show_threads</code>（<code>-P</code>）参数显示当前配置，然后测试所请求的更改是否按预期进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">tuna --threads=gnome-sc\* \</span><br><span class="line">        --show_threads \</span><br><span class="line">        --cpus=0 \</span><br><span class="line">        --move \</span><br><span class="line">        --show_threads \</span><br><span class="line">        --cpus=1 \</span><br><span class="line">        --move \</span><br><span class="line">        --show_threads \</span><br><span class="line">        --cpus=+0 \</span><br><span class="line">        --move \</span><br><span class="line">        --show_threads</span><br><span class="line"></span><br><span class="line">                       thread       ctxt_switches</span><br><span class="line">     pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd</span><br><span class="line">   3861   OTHER     0      0,1     33997           58 gnome-screensav</span><br><span class="line">                       thread       ctxt_switches</span><br><span class="line">     pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd</span><br><span class="line">   3861   OTHER     0        0     33997           58 gnome-screensav</span><br><span class="line">                       thread       ctxt_switches</span><br><span class="line">     pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd</span><br><span class="line">   3861   OTHER     0        1     33997           58 gnome-screensav</span><br><span class="line">                       thread       ctxt_switches</span><br><span class="line">     pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd</span><br><span class="line">   3861   OTHER     0      0,1     33997           58 gnome-screensav</span><br></pre></td></tr></table></figure><p>The above example command performs the following operations sequentially:</p><ol><li>Select all threads that begin with <code>gnome-sc</code>.</li><li>Show the selected threads to enable the user to verify their affinity mask and RT priority.</li><li>Select CPU 0.</li><li>Move the <code>gnome-sc</code> threads to the selected CPU (CPU 0).</li><li>Show the result of the move.</li><li>Reset the CPU list to CPU 1.</li><li>Move the <code>gnome-sc</code> threads to the selected CPU (CPU 1).</li><li>Show the result of the move.</li><li>Add CPU 0 to the CPU list.</li><li>Move the <code>gnome-sc</code> threads to the selected CPUs (CPUs 0 and 1).</li><li>Show the result of the move.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以使用&lt;code&gt;tuna&lt;/code&gt;程序调整调度程序可调参数，调整线程优先级，&lt;code&gt;IRQ&lt;/code&gt;处理程序以及隔离CPU核心和套接字，&lt;code&gt;tuna&lt;/code&gt;旨在降低执行调优任务的复杂性。&lt;/p&gt;
&lt;h1 id=&quot;用tuna查看系统&quot;&gt;&lt;a href=&quot;#用tuna查看系统&quot; class=&quot;headerlink&quot; title=&quot;用tuna查看系统&quot;&gt;&lt;/a&gt;用tuna查看系统&lt;/h1&gt;&lt;p&gt;可以使用&lt;code&gt;tuna&lt;/code&gt;显示系统当前正在发生的情况。&lt;/p&gt;
&lt;p&gt;查看当前的策略和优先事项，使用&lt;code&gt;tuna --show_threads&lt;/code&gt;命令：&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="Tools" scheme="https://www.sysctl.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>配置透明的大内存页</title>
    <link href="https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/MEMORY/Configure-transparent-large-memory-pages/"/>
    <id>https://www.sysctl.me/2019/01/01/Linux/Performance-tuning/MEMORY/Configure-transparent-large-memory-pages/</id>
    <published>2019-01-01T01:10:00.000Z</published>
    <updated>2020-01-22T14:34:21.184Z</updated>
    
    <content type="html"><![CDATA[<p>透明大内存页（THP）是HugeTLB的替代解决方案。使用THP，内核会自动为进程分配大内存页，因此不需要手动预留大内存页。</p><p>THP功能有两种操作模式：系统范围和每个进程。当在系统范围内启用THP时，内核会尝试在可能分配大页面时，内核会尝试在可能分配大页面时为任何进程分配大页面，并且该进程使用大的连续虚拟内存区域。如果每个进程启用THP，则内核仅将大页面分配给<code>madvise()</code>系统调用指定的各个进程的内存区域。</p><p>注意，THP功能仅支持2MB页面。默认情况下启用透明大页面，要检查状态，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure><p>要启用透明的大页面，请运行：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> always &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure></p><p>为了防止应用程序分配超出必要的内存资源，可以在系统范围内禁用大页面，并且只能通过以下命令在<code>MADV_HUGEPAGE madvise</code>区域启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> madvise &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure><p>要禁用透明大内存页，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure><p>有时，为了短期分配提供低延迟比使用长期分配立即获得最佳性能具有更高的优先级，这种情况下，可以在启用THP的同事禁用<code>direct compaction</code>。</p><p>直接压缩巨大页面分配期间的同步内存压缩。禁用直接压缩不能保证节省内存。  但可以减低频繁页面错误期间更高延迟的风险，主要如果工作负载从THP中获益很大，则性能会降低，要禁用直接压缩，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> madvise &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;透明大内存页（THP）是HugeTLB的替代解决方案。使用THP，内核会自动为进程分配大内存页，因此不需要手动预留大内存页。&lt;/p&gt;
&lt;p&gt;THP功能有两种操作模式：系统范围和每个进程。当在系统范围内启用THP时，内核会尝试在可能分配大页面时，内核会尝试在可能分配大页面时为任何进程分配大页面，并且该进程使用大的连续虚拟内存区域。如果每个进程启用THP，则内核仅将大页面分配给&lt;code&gt;madvise()&lt;/code&gt;系统调用指定的各个进程的内存区域。&lt;/p&gt;
&lt;p&gt;注意，THP功能仅支持2MB页面。默认情况下启用透明大页面，要检查状态，运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /sys/kernel/mm/transparent_hugepage/enabled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要启用透明的大页面，请运行：&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sysctl.me/categories/Linux/"/>
    
    
      <category term="RAM" scheme="https://www.sysctl.me/tags/RAM/"/>
    
  </entry>
  
</feed>
